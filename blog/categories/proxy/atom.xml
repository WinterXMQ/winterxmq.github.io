<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: proxy | 落寞纷飞]]></title>
  <link href="http://WinterXMQ.github.io/blog/categories/proxy/atom.xml" rel="self"/>
  <link href="http://WinterXMQ.github.io/"/>
  <updated>2014-11-04T12:26:16+00:00</updated>
  <id>http://WinterXMQ.github.io/</id>
  <author>
    <name><![CDATA[WinterXMQ]]></name>
    <email><![CDATA[WinterXMQ@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debian上搭建ShadowSocks服务]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/15/debian-shadowsocks/"/>
    <updated>2014-10-15T11:46:04+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/15/debian-shadowsocks</id>
    <content type="html"><![CDATA[<p>在DigitalOcean上搭建好Droplet后的第一件事就是搭建ShadowSocks服务, 用ShadowSocks翻墙时最受不了的就是服务器失效, 所以最靠谱的就是自己搭建一个</p>

<p>采用ShadowSocks的libev版本, 这个版本的特点是内存占用小(600k左右),使用libev和C编写，低CPU消耗，甚至可以安装在基于OpenWRT的路由器上<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>这篇博客有借鉴价值, 对于Debian、Ubuntu、Arch等意义并不大, 这个发行版都有源</p>

<h1>Install</h1>

<p>关于之前提到的三个发行版(Debian, Ubuntu, Arch), Debian和Ubuntu的情况差不多, 不过Ubuntu已经很久不玩了, 也不清楚什么状况, Arch相关的安装配置以后补上</p>

<h2>Debian源的配置</h2>

<p>ShadowSocks不在官方源里, 需要额外配置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/apt/sources.list
</code></pre>

<p>按照系统的版本增加源, Debian Wheezy指的是Debian 7</p>

<pre><code class="bash"># Debian Wheezy, Ubuntu 12.04 or any distribution with libssl &gt; 1.0.1
deb http://shadowsocks.org/debian wheezy main

# Debian Squeeze, Ubuntu 11.04, or any distribution with libssl &gt; 0.9.8, but &lt; 1.0.0
deb http://shadowsocks.org/debian squeeze main
</code></pre>

<p>增加完后更新缓存</p>

<pre><code class="bash">&gt;&gt; sudo apt-get update
</code></pre>

<h2>Install &amp;&amp; Configure &amp;&amp; Start Service</h2>

<blockquote><p>Debian</p></blockquote>

<p>采用如下命令安装shadowsocks-libev</p>

<pre><code class="bash">&gt;&gt; sudo apt-get install shadowsocks
</code></pre>

<p>安装完后, 编辑配置文件, 设定监听地址、端口、密码以及加密方式, 然后启动服务</p>

<pre><code class="bash"># Edit the configuration
&gt;&gt; sudo vim /etc/shadowsocks/config.json

# Start the service
&gt;&gt; sudo /etc/init.d/shadowsocks start
</code></pre>

<h2>检测</h2>

<p>通过如下命令检测服务是否开启</p>

<pre><code class="bash">&gt;&gt; ps -ef | grep ss-server | grep -v ps | grep -v grep
</code></pre>

<p>也可以检测端口是否被监听来判断</p>

<pre><code class="bash">&gt;&gt; netstat -antl
</code></pre>

<h1>Configure</h1>

<h2>General</h2>

<p>配置文件的内容如下</p>

<pre><code class="bash">{
    "server":"my_server_ip",
    "server_port":8388,
    "local_address": "127.0.0.1",
    "local_port":1080,
    "password":"mypassword",
    "timeout":300,
    "method":"aes-256-cfb",
    "fast_open": false,
    "workers": 1
}
</code></pre>

<p>其中 <code>server</code> 是ShadowSocks监听的ip, 一般设置成服务器的公网IP; <code>server_port</code> 是ShadowSocks监听的端口, 据说拉低端口号会提高速度, 有一些人比较极端的会设置成443(https的端口); <code>password</code> 应该不用说了; <code>method</code> ShadooSocks支持很多中加密方式, 有些安全但速度比较慢, 有些不太安全但速度快, 看你怎么选择<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<h2>IPV4 And IPV6</h2>

<p>因为在学校里有IPV6的环境, 方便在没有网络的时候可以采用IPV6来上网</p>

<p>如果把 <code>server</code> 设置成服务器的公网IP, 那就只能适用IPV4连接, 如果设置成服务器的IPV6地址, 那就只能IPV6连接, 为此还查了一番, 这个问题比较好解决, 按照这样设置即可 <code>"server": "::"</code></p>

<p>如此设置时的确可以完成同时响应IPV4和IPV6, 但是在查看端口监听的时候只能发现程序监听了IPV6</p>

<pre><code class="bash">&gt;&gt; netstat -antl | grep "server_port"
tcp6       0      0 :::2299                 :::*                    LISTEN
</code></pre>

<h2>统计流量</h2>

<p>由于我希望同时监听IPV4和IPV6, 而接下来要介绍的方法我不敢保证是否支持这一特性, 同时我也暂时没有时间, 因此没有测试, 仅供参考, 来自于<a href="http://yzs.me/"></a>的<a href="http://yzs.me/2230.html">利用IPTABLES对Shadowsocks统计流量</a></p>

<p>原理: ShadowSocks监听内网地址, 通过iptables的网络转发功能把数据转发到内网地址上来实现</p>

<p>1) 添加一个loop back用的内网IP</p>

<pre><code class="bash">&gt;&gt; ifconfig eth0:ss1 10.10.10.10 netmask 255.255.255.0 up
</code></pre>

<p><strong>注意:</strong></p>

<ol>
<li><p>网卡名不是eth0的自己修改</p></li>
<li><p>以这种形式增加的内网地址在重启后会失效, 可以修改网卡的配置文件(/etc/network/interfaces或/etc/sysconfig/network-scripts/)添加IP，或者把添加IP的命令加到/etc/rc.local里面</p></li>
</ol>


<p>2) 修改ShadowSocks监听的网络, 并重启 <code>sudo service shadowsocks restart</code></p>

<pre><code class="bash">"server":"10.10.10.10",
</code></pre>

<p>3) 开启系统的IPV4转发功能</p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/sysctl.conf
</code></pre>

<p>确保 <code>net.ipv4.ip_forward = 1</code> 前没有 <code>#</code></p>

<p>如果有修改, 执行 <code>sudo sysctl -p</code> 使之生效</p>

<p>4) iptables 设置转发</p>

<pre><code class="bash">&gt;&gt; iptables -t nat -I PREROUTING -p tcp --dport SERVER_PORT -j DNAT --to-destination 10.10.10.10
</code></pre>

<p>5) 设置统计流量</p>

<p>统计内网地址的入网和出网的流量</p>

<pre><code class="bash">&gt;&gt; iptables -I INPUT -d 10.10.10.10
&gt;&gt; iptables -I OUTPUT -s 10.10.10.10
</code></pre>

<p>查询流量</p>

<pre><code class="bash">&gt;&gt; iptables -L -n -v
</code></pre>

<p><strong>注意:</strong></p>

<p>这样设置无法清空10.10.10.10的统计数据, 解决办法: 因为加入到FORWARD里面了，不能直接-Z，否则会全部清零，如果要清零单条，最好创建另一个链，把这个记录加入那个链中，再把那个链加入FORWARD中，清零是直接iptables -Z 链名称就行了</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>参考自<a href="http://teddysun.com/">秋水逸冰</a>的<a href="http://teddysun.com/358.html">Debian下shadowsocks-libev一键安装脚本</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>参考自<a href="https://github.com/madeye/shadowsocks-libev">ShadowSocks-libev</a>的<a href="https://github.com/madeye/shadowsocks-libev#install-from-repository">Install from repository</a>, 包括两份版本的Debian和Ubuntu的源<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>参考自<a href="https://github.com/clowwindy/shadowsocks#configuration">shadowsocks-libev作者的Github</a>, 里面有具体的说明<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>

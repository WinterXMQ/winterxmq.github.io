<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: archlinux | 落寞纷飞]]></title>
  <link href="http://WinterXMQ.github.io/blog/categories/archlinux/atom.xml" rel="self"/>
  <link href="http://WinterXMQ.github.io/"/>
  <updated>2014-11-11T16:26:56+00:00</updated>
  <id>http://WinterXMQ.github.io/</id>
  <author>
    <name><![CDATA[WinterXMQ]]></name>
    <email><![CDATA[WinterXMQ@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ArchLinux上磁盘扩展]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/10/extend-volume/"/>
    <updated>2014-11-10T14:13:44+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/10/extend-volume</id>
    <content type="html"><![CDATA[<p>问题: 在VBox上创建ArchLinux虚拟机的时候就想着如果硬盘不够用, 就到时候再想办法扩容, 因此当时就只搞了8G的硬盘, 其中还有1G的Swap分区; 没想到这个问题这么快就出现了, 因此就有了一下的解决方案</p>

<p>问题分析:</p>

<p>由于虚拟磁盘采用的是 <code>VirtualBox Disk Image</code>, 同时在ArchLinux中没有逻辑磁盘(LVM)还有就是就是系统只有单个分区, 所以不适合采用另加磁盘的挂载方式来解决。</p>

<p>问题解决方案:</p>

<p>总体方案: 给 <code>/</code> 分区扩容, 分两步, 1) 先给虚拟磁盘扩容; 2) 再想办法给 <code>/</code> 分区扩容</p>

<h1>VBox 的虚拟磁盘扩容</h1>

<p>在 VBox 中有一个管理工具可以对磁盘扩容, 支持命令行, 操作更加简便</p>

<p>查看 VBox 下注册的虚拟磁盘</p>

<pre><code class="bash">&gt;&gt; VBoxManage list hdds
UUID:           a314bb2f-c879-4e1d-9669-251a5e49f54f
Parent UUID:    base
State:          locked write
Type:           normal (base)
Location:       C:\OS\Arch_Box\ArchV.vdi
Storage format: VDI
Capacity:       20480 MBytes
</code></pre>

<p>便可得到磁盘的UUID为 a314bb2f-c879-4e1d-9669-251a5e49f54f</p>

<p>使用磁盘的UUID给磁盘扩容</p>

<pre><code class="bash">&gt;&gt; VBoxManage modifyhd a314bb2f-c879-4e1d-9669-251a5e49f54f --resize 20480
</code></pre>

<p>此时磁盘中被扩展的那部分空间还没被分配, 需要在系统中操作</p>

<h1>分区扩展</h1>

<p>虽然说ext4分区的收缩和扩展技术是成熟的, 但由于之前的分区是老版的cfdisk创建的, 引导区的大小是62个扇区, 分区是从63扇区开始的, 而现在所有的Linux上的工具都默认从2048个扇区开始分配空间, 因此会造成根分区被删除后重建时, 分区上的数据信息会丢失, 目前对此没有找到可行的方案; 因此采用如下方案, 同时也会记录原方案, 方便以后对2,3,4分区的扩展; 采用的方案是: 采用Linux的逻辑卷(LVM)的管理办法。</p>

<h2>LVM解决方案</h2>

<p>简单的说就是重构现在的磁盘结构, 全面换成LVM磁盘</p>

<p>(1) 创建一个新磁盘, 和安装盘一起连接到虚拟机上, 重启, 进入安装系统</p>

<p>(2) 开始新磁盘的分区操作</p>

<p>由于要采用LVM的磁盘管理办法, 首先要对安装系统做如下操作</p>

<p>安装lvm2</p>

<pre><code class="bash">&gt;&gt; pacman -Syy
&gt;&gt; pacman -S lvm2
</code></pre>

<p>加载 dm_mod</p>

<pre><code class="bash">&gt;&gt; modprobe dm_mod
</code></pre>

<p>物理分区, 和以前一样, 这次采用fdisk来处理</p>

<pre><code class="bash">&gt;&gt; fdisk /dev/sdb
Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-41943039, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-41943039, default 41943039):

Created a new partition 1 of type 'Linux' and of size 20 GiB.

Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 8e
Changed type of partition 'Linux' to 'Linux LVM'.

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

&gt;&gt; fdisk -l /dev/sdb

Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000

Device    Boot Start       End   Blocks  Id System
/dev/sdb1       2048  41943039 20970496  8e Linux LVM
</code></pre>

<p>开始设置LVM磁盘系统</p>

<p>创建物理卷 Physical Volume</p>

<pre><code class="bash">&gt;&gt; pvcreate /dev/sdb1
&gt;&gt; pvdisplay
--- Physical volume ---
  PV Name               /dev/sda1
  VG Name               root
  PV Size               20.00 GiB / not usable 3.00 MiB
  Allocatable           yes (but full)
  PE Size               4.00 MiB
  Total PE              5119
  Free PE               0
  Allocated PE          5119
  PV UUID               BduFVm-tKMn-JDPf-b1U8-vcs8-8YDk-FNsW0e
</code></pre>

<p>创建卷组 Volume Group</p>

<pre><code class="bash">&gt;&gt; vgcreate root /dev/sdb1
&gt;&gt; vgdisplay
  --- Volume group ---
  VG Name               root
  System ID
  Format                lvm2
  Metadata Areas        1
  Metadata Sequence No  2
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                1
  Open LV               1
  Max PV                0
  Cur PV                1
  Act PV                1
  VG Size               20.00 GiB
  PE Size               4.00 MiB
  Total PE              5119
  Alloc PE / Size       5119 / 20.00 GiB
  Free  PE / Size       0 / 0
  VG UUID               kROehq-qYhI-U21s-Guaq-FFns-bv3R-8cIzDA
</code></pre>

<p>创建逻辑卷 Logical Volume, 及以后操作的卷</p>

<pre><code class="bash">&gt;&gt; lvcreate -l +100%FREE root -n root
&gt;&gt; lvdisplay
  --- Logical volume ---
  LV Path                /dev/root/root
  LV Name                root
  VG Name                root
  LV UUID                YtEeaf-sqJJ-8VAq-MdYo-es8Q-uTtO-QulEHJ
  LV Write Access        read/write
  LV Creation host, time archiso, 2014-11-10 03:41:50 +0000
  LV Status              available
  # open                 1
  LV Size                20.00 GiB
  Current LE             5119
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           254:0
</code></pre>

<p>(3) 磁盘格式化, 选定磁盘系统(和以前一样)</p>

<pre><code class="bash">&gt;&gt; mkfs.ext4 /dev/mapper/root-root
</code></pre>

<p>(4) 拷贝数据(不建议挂载磁盘后用cp命令来执行, 建议采用如下命令完成, 虽然步骤有点多, 但胜在可靠)</p>

<p>采用 <code>dd</code> 来镜像拷贝磁盘</p>

<pre><code class="bash">&gt;&gt; dd if=/dev/sda1 of=/dev/mapper/root-root
</code></pre>

<p>这时候你用 <code>df -h</code> 去查看 <code>/dev/mapper/root-root</code> 的容量时会发现 <code>/dev/mapper/root-root</code> 的磁盘大小和 <code>/dev/sda1</code> 的是一样的, 由于拷贝的时候连同分区表信息都一起拷贝过来了(这个问题还是在正式进入系统后才发现的), 需要做如下处理来扩展磁盘</p>

<pre><code class="bash">&gt;&gt; resize2fs /dev/mapper/root-root 20476M
</code></pre>

<p>(5) 新系统设置</p>

<p>生成新的分区表信息</p>

<pre><code class="bash">&gt;&gt; genfstab -U -p /mnt
</code></pre>

<p>把生成的信息写入 <code>/etc/fstab</code>, 删除以前的分区信息</p>

<p>进入新系统</p>

<pre><code class="bash">&gt;&gt; arch-chroot /mnt/new /bin/zsh
</code></pre>

<p>设置系统内核, 配合LVM文件系统</p>

<pre><code class="bash">&gt;&gt; vim /etc/mkinitcpio.conf
</code></pre>

<p>确保 udev 和 lvm2 被 mkinitcpio 加载, 确保 lvm2 在 block 和 filesystem 之间</p>

<pre><code class="bash">HOOKS="base udev ... block lvm2 filesystems"
</code></pre>

<p>以及确保 dm-mod 被加载</p>

<pre><code class="bash">MODULES="dm_mod ..."
</code></pre>

<p>安装系统引导</p>

<pre><code class="bash">&gt;&gt; grub-install --modules=lvm --target=i386-pc --recheck /dev/sda
</code></pre>

<p>会出现如下错误, 是由于/run在arch-chroot环境下不可用导致的, 但不会影响正常安装</p>

<pre><code class="bash">  /run/lvm/lvmetad.socket: connect failed: No such file or directory
  WARNING: Failed to connect to lvmetad. Falling back to internal scanning.
</code></pre>

<p>更新grub列表</p>

<pre><code class="bash">&gt;&gt; grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>

<p>在正式进入系统后, 再重新执行一边</p>

<h2>Basic 解决方案</h2>

<p>简单的来说就是基于基本磁盘的收缩和扩容方案, 这个方法在这里不适用的原因是前后引导区的大小不一致(扩容时需要把分区删掉重建, 由于删除重建前后的引导区大小不一致, 使得分区起始位置不同, 而导致的分区信息丢失, 磁盘类别不可识别, 引起扩容失败), 但对于第2, 3, 4分区的扩容以及引导分区大小不会变化的磁盘, 此方案可行, 已测试过</p>

<p>(1) 收缩磁盘</p>

<pre><code class="bash">&gt;&gt; resize2fs /dev/sdaX size
</code></pre>

<p>注意: 1) size 小于实际分区大小且大于已用大小; 2) 此命令可能造成数据丢失, 谨慎操作; 3) 操作前, 可用 <code>e2fsck -f /dev/sdaX</code> 强制检查磁盘</p>

<p>(2) 扩充磁盘</p>

<p>采用 <code>fdisk /dev/sdaX</code> 来删除重建分区, 只要初始位置不变, 容量扩大, 不必担心删除时数据丢失, 之后再适用上条命令完成磁盘扩容</p>

<h1>参考</h1>

<blockquote><p>[1] <a href="http://www.2cto.com/os/201306/222822.html">http://www.2cto.com/os/201306/222822.html</a></p>

<p>[2] <a href="https://wiki.archlinux.org/index.php/Lvm">https://wiki.archlinux.org/index.php/Lvm</a></p>

<p>[3] <a href="http://www.byywee.com/page/M0/S834/834847.html">http://www.byywee.com/page/M0/S834/834847.html</a></p>

<p>[4] <a href="http://bbs.chinaunix.net/thread-1972006-1-1.html">http://bbs.chinaunix.net/thread-1972006-1-1.html</a></p>

<p>[5] <a href="http://linux.cn/article-3218-1.html">http://linux.cn/article-3218-1.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 安装Aur包管理器Yaourt]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/09/yaourt/"/>
    <updated>2014-11-09T06:07:30+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/09/yaourt</id>
    <content type="html"><![CDATA[<p>(1) 安装Yourt包管理器, 首先添加软件源, <code>sudo vim /etc/pacman.conf</code>, 在文件尾增加如下内容</p>

<pre><code class="bash">[archlinuxcn]
# The Chinese Arch Linux communities packages.
SigLevel = Optional TrustAll
Server   = http://repo.archlinuxcn.org/$arch
</code></pre>

<p>(2) 更新缓存, <code>sudo pacman -Syy</code></p>

<p>(3) 安装Yourt, <code>sudo pacman -S yaourt</code></p>

<p>(4) 安装Aurvote, <code>sudo pacman -S aurvote</code></p>

<p>(5) 配置aurvote, <code>aurvote --configure</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 下FTP服务器的搭建]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/08/ftp-setup/"/>
    <updated>2014-11-08T16:10:51+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/08/ftp-setup</id>
    <content type="html"><![CDATA[<p>为了方便BBS测试的文件上传, 就此搭建FTP服务器</p>

<h1>Install</h1>

<p>安装 <code>vsftpd</code></p>

<pre><code class="bash">&gt;&gt; sudo pacman -S vsftpd
</code></pre>

<p>启动 vsftpd 和 设置开机自启</p>

<pre><code class="bash">&gt;&gt; sudo systemctl enable vsftpd
&gt;&gt; sudo systemctl start vsftpd
</code></pre>

<h1>Configuration</h1>

<p>大多数的设置在 <code>/etc/vsftpd.conf</code>, 打开配置文件</p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/vsftpd.conf
</code></pre>

<p>启用上传功能, <code>write_enable=YES</code></p>

<p>开启本地用户登录功能, <code>local_enable=YES</code></p>

<p>开启IPV6支持</p>

<pre><code class="bash">listen=NO
listen_ipv6=YES
</code></pre>

<p>自定义端口, 增加配置 <code>listen_port=2211</code>, 打开防火墙</p>

<pre><code class="bash">iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 2211 -j ACCEPT
</code></pre>

<p>增加用户设置</p>

<pre><code class="bash">&gt;&gt; sudo htpasswd -c /etc/vsftpd/.passwd Username
New password:
Re-type new password:
</code></pre>

<p>若以后想增加用户, 可以使用 <code>sudo htpasswd /etc/vsftpd/.passwd Username</code></p>

<p>这种方式增加的用户应该是不能被认证的, 用如下命令生成的密码替换</p>

<pre><code class="bash">&gt;&gt; openssl passwd -1
</code></pre>

<p>向PAM service注册认证数据库, <code>sudo vim /etc/pam.d/vsftpd</code>, 并增加如下内容</p>

<pre><code class="bash">auth required pam_pwdfile.so pwdfile /etc/vsftpd/.passwd
account required pam_permit.so
</code></pre>

<p>同时需要安装PAM对pwdfile的认证支持库, <code>sudo yaout pam_pwdfile</code>, Yaourt的安装见<a href="/blog/2014/11/09/yaourt/">Arch Linux 安装Aur包管理器Yaourt</a></p>

<p>在系统中增加ftp虚拟用户</p>

<pre><code class="bash">&gt;&gt; sudo useradd -d /srv/ftp -s/usr/bin/nologin -G ftp -M ftp
</code></pre>

<p>更改文件夹的所有人, <code>sudo chown -R ftp:ftp /srv/ftp</code></p>

<p>配置文件里增加如下信息</p>

<pre><code class="bash"># pointing to the correct PAM service file
pam_service_name=vsftpd
write_enable=YES
hide_ids=YES
listen=YES
connect_from_port_20=YES
anonymous_enable=NO
local_enable=YES
dirmessage_enable=YES
xferlog_enable=YES
chroot_local_user=YES
guest_enable=YES
guest_username=virtual
virtual_use_local_privs=YES
</code></pre>

<p>在用的过程中发现 FTP 不支持软链接的方式, 因此换成mount的方式来实现</p>

<pre><code class="bash">&gt;&gt; sudo mount --bind /path/to/source /srv/ftp/
</code></pre>

<p>接着重启vsftpd服务器就行了</p>

<h1>参考</h1>

<blockquote><p>(1) <a href="https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon">https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon</a></p>

<p>(2) <a href="http://www.cnblogs.com/acpp/archive/2010/02/08/1665876.html">http://www.cnblogs.com/acpp/archive/2010/02/08/1665876.html</a></p>

<p>(3) <a href="http://blog.chinaunix.net/uid-26263042-id-3230479.html">http://blog.chinaunix.net/uid-26263042-id-3230479.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArchLinux上搭建LAMP环境]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/28/lamp/"/>
    <updated>2014-10-28T05:37:56+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/28/lamp</id>
    <content type="html"><![CDATA[<p>为了给基于Discuz模板的BBS增加一个小功能而在本地ArchLinux虚拟机里搭建一个BBS的测试平台</p>

<h1>Apache And PHP Installation</h1>

<p>分别安装 apache php 和 php-apache组件</p>

<pre><code class="bash">&gt;&gt; sudo pacman -S apache php php-apache
</code></pre>

<p>启动 apache, <code>sudo systemctl start httpd</code></p>

<p>测试 php 环境</p>

<pre><code class="bash">&gt;&gt; sudo vim /srv/http/info.php
</code></pre>

<p>在文件中写下如下信息</p>

<pre><code class="php">&lt;?php phpinfo(); ?&gt;
</code></pre>

<p>打开网页测试效果</p>

<p>测试结果未生效, 在 apache 中启用 php</p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/httpd/conf/httpd.conf
</code></pre>

<p>查找 <code>LoadModule dir_module modules/mod_dir.so</code> 下增加</p>

<pre><code class="bash">LoadModule php5_module modules/libphp5.so
</code></pre>

<p>同时在 <code>Include</code> 列表末尾增加</p>

<pre><code class="bash">Include conf/extra/php5_module.conf
</code></pre>

<p>由于在 ArchLinux 中 php-apache 下的 libphp5.so 无法和 mod_mpm_event 一起工作, 会有如下错误</p>

<pre><code class="bash">Apache is running a threaded MPM, but your PHP Module is not compiled to be threadsafe.  You need to recompile PHP.
AH00013: Pre-configuration failed
httpd.service: control process exited, code=exited status=1
</code></pre>

<p>有如下两种解决办法:</p>

<p>1) 对 apache php 等重新编译, 启用 thread safety(没试过)</p>

<p>2) 采用替换方法</p>

<p>使用 mod_mpm_prefork, 打开 <code>/etc/httpd/conf/httpd.conf</code>, 把</p>

<pre><code class="bash">LoadModule mpm_event_module modules/mod_mpm_event.so
</code></pre>

<p>替换成</p>

<pre><code class="bash">LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
</code></pre>

<p>重启 apache, <code>sudo systemctl restart httpd</code>, 打开网页测试 <code>info.php</code> 页面, 看到如下画面说明 PHP 启用成功</p>

<p><img src="http://img.vim-cn.com/85/64208227801a398d079fc7e0ffbb874a2e3241.jpg" alt="PHPinfo" /></p>

<h1>Mysql or MariaDB Installation</h1>

<p>安装 Mysql/MariaDB, <code>sudo pacman -S mysql</code></p>

<p>启用 pdo_mysql.so 和 mysqli.so, 打开 <code>sudo vim /etc/php/php.ini</code>, 分别去掉如下两条配置的注释符</p>

<pre><code class="bash">extension=pdo_mysql.so
extension=mysqli.so
</code></pre>

<p>目前的配置到此结束。</p>

<h1>关于Discuz的配置</h1>

<p>=====增加于 2014/11/4=======</p>

<p>首先把Discuz的文件放置到站点文档目录下, 初步配置一下权限</p>

<pre><code class="bash">&gt;&gt; sudo chmod -R 744 upload/    ; 把所有文件文件夹的权限调低
&gt;&gt; sudo chmod -R -x upload
&gt;&gt; sudo chmod -R +x upload      ; 这两个命令完成 取消文件的执行权限
&gt;&gt; sudo mv upload/* /sur/http/
</code></pre>

<blockquote><p>出现三个问题:</p>

<p>(1) GD库没安装</p>

<p>(2) 文件权限需要重启配置</p>

<p>(3) PHP不能正确连接mysql</p></blockquote>

<p>解决方案</p>

<p>(1) 安装GD库</p>

<pre><code class="bash">&gt;&gt; sudo pacman -S php-gd
</code></pre>

<p>配置php, 打开 <code>sudo vim /etc/php/php.ini</code>, 取消 <code>extension=gd.so</code></p>

<p>重启apache服务, <code>sudo systemctl retstart httpd</code></p>

<p>(2) 配置文件权限</p>

<pre><code class="bash">&gt;&gt; sudo chown -R http:http config
&gt;&gt; sudo chown -R http:http data
&gt;&gt; sudo chown -R http:http uc_client/data/cache
&gt;&gt; sudo chown -R http:http uc_server/data
</code></pre>

<p>(3) 检查mysql与php的情况</p>

<p>编辑php.ini, <code>sudo vim /etc/php/php.ini</code>, 确保一下三条处于打开的状态</p>

<pre><code class="bash">extension=mysql.so
extension=mysqli.so
extension=pdo_mysql.so
</code></pre>

<p>此外还要解决数据库初始化的问题</p>

<pre><code class="bash">&gt;&gt; sudo mysql_secure_installation
&gt;&gt; sudo systemctl restart mysqld
</code></pre>

<h1>参考文献</h1>

<p><a href="https://wiki.archlinux.org/index.php/Apache">https://wiki.archlinux.org/index.php/Apache</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archlinux 的安装]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/09/28/archlinux-install/"/>
    <updated>2014-09-28T00:08:29+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/09/28/archlinux-install</id>
    <content type="html"><![CDATA[<p>其实很早就像写个Archlinux的安装Blog, 但是由于很多原因就一直拖到现在才开始动手</p>

<p>Archlinux和Linux的其他发行版不同, Arch就像是四驱赛车一样, 需要自己挑选零件、自己组装, 因此具有很大的自由度而且难度也不是非常大&lt;当然相比于其他的发行版已经是难多了, 其实我比较推从gentoo, 它比Arch还要复杂, 因为它连零件都要自己制作>。选择Arch的第二个原因是它的软件中心, 支持自定义软件。</p>

<p>接下来我们谈谈Arch的安装问题, 我分别在虚拟机<code>Vbox</code>和实体机都装过, 因此在这个Blog中会详细的谈谈。在Arch安装中最复杂的就是桌面环境的配置, 我也尚未完全搞定, 因此不再Blog中做过多的说明。</p>

<h1>Basic System Install</h1>

<p>基本系统的安装在虚拟机和实体机上的差别为0, 其中的注意点就是在于软件包的选择和安装上。</p>

<h2>Download the system for installation</h2>

<p>首先需要下载<a href="https://www.archlinux.org/download/" title="Arch Linux System Download">官方镜像</a>, 无论用什么下载工具都无所谓。</p>

<p>在这个小节中最重要的就是如何制作安装U盘&lt;如果只是为了说明如何下载就开一个新的小节来说明就显得太脑残了, 同时这一小节也是虚拟机和实体机安装中为数不多的差别中的第一个>。</p>

<blockquote><p>Linux</p></blockquote>

<p>在Linux中, 启动U盘相对好做一点&lt;毕竟要安装的是Linux, 同时是因为Linux中对待磁盘的工具比较灵活, 可以满是不同的磁盘操作需求>。</p>

<p>首先, 通过 <code>lsblk</code> 来找到你的U盘</p>

<p>然后通过下面的命令完成镜像的写入<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<pre><code class="bash">&gt;&gt; dd bs=4M if=/path/to/archlinux.iso of=/dev/sdx &amp;&amp; sync
</code></pre>

<blockquote><p>Windows</p></blockquote>

<p>在Windows下需要借助第三方的软件来达到目标, 采用<a href="http://rufus.akeo.ie/" title="Rufus 下载">Rufus</a>。当然也有其他的解决方案, 但是不怎么方便&lt;其实是我自己没有成功过>。</p>

<blockquote><p><strong>注意点</strong>:</p>

<ol>
<li><p> 任何被用来制作Arch Linux的安装盘的U盘中的数据都会被清除, 而且无论U盘是多大的, 制作完毕后可用的内存都是24M&lt;没记错的是话就是这么大的>。</p></li>
<li><p> 如果U盘需要还原, 在以后的Blog中介绍</p></li>
<li><p> 对于这部分有什么疑问的可以参照<a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media" title="Arch Linux Official Wiki on USB-Flash-Install-Media">Arch Linux的官方Wiki</a></p></li>
</ol>
</blockquote>

<h2>Configure the Install System</h2>

<p><em>说明: 开这个小节主要是为了总结我的安装过程, 很多朋友应该可以直接忽略</em></p>

<p>首先启动系统&lt;如何启动系统就不说了></p>

<h3>Configure the net</h3>

<p>配置网络:</p>

<ol>
<li><p> 虚拟机: 一般的新建的虚拟机都可以正常的访问网络&lt;如果有问题, 请问度娘></p></li>
<li><p> 实体机:</p>

<ul>
<li><p>Wifi: 运行 <code>wifi-menu interface-name</code></p></li>
<li><p>dsl:  依次运行 <code>pppeo-setup</code>, <code>pppoe-start</code> 来启动dsl, 运行 <code>pppoe-stop</code> 来停止dsl</p></li>
</ul>
</li>
</ol>


<p><em>对于虚拟机可能需要配置静态IP, 通过 <code>ip addr add dev enp0s8 192.168.1.109/24</code> 来完成</em></p>

<h3>About the Sources</h3>

<p>这的地方的配置主要是为了解决国外源速度慢的问题, 把源换成国内相对比较快的。</p>

<p>首先先备份一下</p>

<pre><code class="bash">&gt;&gt; cd /etc/pacman.d/
&gt;&gt; mv mirrorlist mirrorlist.origin
</code></pre>

<p>设置软件源, 由于<a href="https://www.archlinux.org/mirrorlist" title="Arch Linux 官方软件园查询">Arch提供软件源查询</a>的功能, 我们采用官方查询的方式解决。</p>

<pre><code class="bash">&gt;&gt; wget -c "https://www.archlinux.org/mirrorlist/?country=CN&amp;protocol=http&amp;ip_version=4&amp;ip_version=6" -O mirrorlist
</code></pre>

<p><strong>注意点</strong>: 下载官方软件源查询出来的文件中的软件源都是被注释掉的, 我们需要手动打开 <code>nano mirrorlist</code>, 即去除 <code>mirrorlist</code> 文件中的 #</p>

<p>此外, 还可以采用Arch中的一个工具对配置中的软件源进行速度排序&lt;可以试试>, 具体操作如下</p>

<pre><code class="bash">&gt;&gt; mv mirrorlist mirrorlist.backup
&gt;&gt; rankmirrors -n 6 mirrorlist.backup &gt; mirrorlist
</code></pre>

<p>然后更新pacman的缓存 <code>pacman -Syy</code>, 同时装上vim方便修改配置文件 <code>pacman -S vim</code></p>

<p>在这里, 提一下个人的习惯, 在终端下配置和安装系统总有些不习惯&lt;开始玩Arch的时候, 现在无所谓了>, &lt;如果条件允许>总是在另一个电脑上用ssh登陆, 进行远程安装&lt;尤其是在虚拟机里安装时, 相对方便一些></p>

<p>可以按照如下命令完成ssh server的配置安装, 同时需要记住本机IP, 通过 <code>ifconfig</code> 查看</p>

<pre><code class="bash">&gt;&gt; pacman -S openssh
&gt;&gt; systemctl start sshd
</code></pre>

<h2>Install the System</h2>

<p>在这里完成基本系统的安装, 使得电脑可以脱离安装光盘orU盘独立运行和配置</p>

<h3>About Partition</h3>

<p>这里不涉及磁盘分区的具体知识, 也不涉及如何分区, 只提两点:</p>

<ol>
<li><p>如果在虚拟机里安装时, 初始安装不要求磁盘有多大&lt;只要有2G就足够了, 后期不够可以再加></p></li>
<li><p>home可以单独分区或分磁盘</p></li>
</ol>


<p>按照如下命令完成分区操作</p>

<pre><code class="bash">&gt;&gt; cfdisk /dev/sda      # 进行分区, 2G的Swap分区, 其余的/分区
&gt;&gt; lsblk
&gt;&gt; fdisk -l
&gt;&gt; mkfs.ext4 /dev/sda1  # 格式化 /分区
&gt;&gt; mkswap /dev/sda2     # 格式化 Swap分区
&gt;&gt; swapon /dev/sda2     # 挂载 Swap分区
&gt;&gt; mount /dev/sda1 /mnt # 挂在 /分区
&gt;&gt; fdisk -l             # 显示挂载情况
&gt;&gt; lsblk -f
</code></pre>

<h3>System Installation</h3>

<p>完成基本系统的安装, 以及配置的基本工具, 按照如下指令完成</p>

<p>下面的四个命令分别完成 <code>基本系统</code>, <code>shell</code>, <code>网络连接工具</code>, <code>常用工具</code> 的安装</p>

<pre><code class="bash">&gt;&gt; pacstrap -i /mnt base base-devel
&gt;&gt; pacstrap -i /mnt bash-completion zsh
&gt;&gt; pacstrap -i /mnt ifplugd wireless_tools wpa_supplicant iw wpa_actiond dialog net-tools rp-pppoe
&gt;&gt; pacstrap -i /mnt openssh vim
</code></pre>

<h3>System Configure</h3>

<p>完成最基本的系统配置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<ol>
<li>生成分区列表</li>
</ol>


<pre><code class="bash">&gt;&gt; genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab
</code></pre>

<ol>
<li><p>进入系统, <code>arch-chroot /mnt /bin/zsh</code></p></li>
<li><p>配置语言环境</p></li>
</ol>


<pre><code class="bash">&gt;&gt; vim /etc/locale.gen
选择 en_US 和 zh_CN
&gt;&gt; locale-gen
&gt;&gt; export LANG="zh_CN.UTF-8"
&gt;&gt; export LANGUAGE="zh_CN:en_US:en"
&gt;&gt; locale &gt; /etc/locale.conf            # 设置中文环境, 并写入配置
</code></pre>

<ol>
<li>设置系统时间</li>
</ol>


<p>选择上海时区</p>

<pre><code class="bash">&gt;&gt; ln -s /usr/share/zoneinfo/Zone/SubZone /etc/localtime
</code></pre>

<p>选择UTC</p>

<pre><code class="bash">&gt;&gt; hwclock --systohc --utc
</code></pre>

<ol>
<li><p>设置主机名, <code>echo Arch-XMQ &gt; /etc/hostname</code></p></li>
<li><p>设置内核模块加载, <code>mkinitcpio -p linux</code></p></li>
<li><p>用户设置</p></li>
</ol>


<p>root用户设置</p>

<pre><code class="bash">&gt;&gt; passwd
&gt;&gt; usermod -s /usr/bin/zsh root
</code></pre>

<p>普通用户创建和配置</p>

<pre><code class="bash">&gt;&gt; useradd -m -g users -G video,audio,power,network,wheel -s /usr/bin/zsh xmq
&gt;&gt; usermod -a -G video,audio,lp,log,wheel,optical,scanner,games,users,storage,power xmq
&gt;&gt; passwd xmq
</code></pre>

<p>普通用户的超级权限配置</p>

<pre><code class="bash">&gt;&gt; chmod 640 /etc/sudoers
&gt;&gt; vim /etc/sudoers
Add `xmq ALL=(ALL) ALL` or
Add `wheel ALL=(ALL) ALL`
&gt;&gt; chmod 440 /etc/sudoers
</code></pre>

<ol>
<li>引导系统的安装</li>
</ol>


<pre><code class="bash">&gt;&gt; pacman -S grub os-prober
&gt;&gt; grub-install /dev/sda
&gt;&gt; grub-mkconfig -o /boot/grub/grub.cfg
&gt;&gt; grep -v rootfs /proc/mounts &gt; /etc/mtab
</code></pre>

<ol>
<li>退出重启</li>
</ol>


<pre><code class="bash">&gt;&gt; exit
&gt;&gt; umount /mnt
&gt;&gt; reboot
</code></pre>

<h1>Desktop Configuration</h1>

<p>桌面的配置并没有完全搞定, 之前用过一段时间的KDE, Gnome, 也配置过一段时间的Openbox, 终究没用长久, 这里主要写一些关于XWindow的配置, 涉及一点的Openbox</p>

<h2>Configuration of Xorg</h2>

<p>这一部分主要完成从终端环境切换到图形界面, 主要包括 <code>X</code> 和 <code>桌面环境</code> 的配置</p>

<h3>Xorg Install</h3>

<p>完成Xorg的安装&lt;说实话Linxu的图形界面到底没弄明白, 不清楚Xorg到底是什么东东></p>

<pre><code class="bash">&gt;&gt; sudo pacman -S xorg-server xorg-server-utils xorg-utils xorg-xinit
</code></pre>

<p><strong>注意:</strong> 这个命令中会让你选择gl的类库, 这个跟显卡有关, 我本机是Nvidia的显卡, 因此实体机安装时选择 <code>nvidia-libgl</code>, 而虚拟机安装时, 由于显卡是虚拟出来的, 因此只要简单的选择 <code>mesa-libgl</code> 即可</p>

<h3>About VAG</h3>

<p>这个地方是Arch Linux在安装过程中实体机与虚拟机的第二处不同点</p>

<ol>
<li>对于实体机而言只要安装了对应的驱动即可</li>
</ol>


<pre><code class="bash">&gt;&gt; sudo pacman -S nvidia
</code></pre>

<p><strong>注意:</strong> 需要重启后才生效, 此时会发现屏幕的分辨率降低不少</p>

<p>同时需要安装输入驱动&lt;包括键盘、鼠标和触摸板的驱动, 我遗忘里到底要安装多少, 以后再补上></p>

<pre><code class="bash">&gt;&gt; sudo pacman -S xf86-input-synapticsxf86-input-synaptics
</code></pre>

<ol>
<li>虚拟机安装</li>
</ol>


<p>我只搞定了在VBox中的桌面安装, 在VMware中到底如何操作, 大家可以尝试尝试</p>

<p>首先安装VBox的驱动</p>

<pre><code class="bash">&gt;&gt; sudo pacman -S virtualbox-guest-utils
</code></pre>

<p>内核加载模块&lt;以下所有的操作需要管理员权限></p>

<pre><code class="bash">&gt;&gt; modprobe -a vboxguest vboxsf vboxvideo
&gt;&gt; depmod $(uname -r)
&gt;&gt; vim /etc/modules-load.d/virtualbox.conf
Add following
vboxguest
vboxsf
vboxvideo
&gt;&gt; VBoxClient-all
&gt;&gt; systemctl enable vboxservice
</code></pre>

<ol>
<li>3D加速 <code>sudo pacman -S mesa</code></li>
</ol>


<h3>About Desktop</h3>

<p>主要完成openbox的安装, 以及部分软件的安装, 至于具体的配置以后再补上</p>

<p>安装 Openbox&lt;桌面管理器>, slim&lt;登陆界面></p>

<pre><code class="bash">&gt;&gt; sudo pacman -S slim openbox
</code></pre>

<p>安装中文字体</p>

<pre><code class="bash">&gt;&gt; sudo pacman -S ttf-dejavu artwiz-fonts wqy-zenhei wqy-bitmapfont wqy-microhei ttf-arphic-ukai ttf-arphic-uming
</code></pre>

<p>配置和启动测试openbox</p>

<pre><code class="bash">&gt;&gt; cp /etc/X11/xinit/xinitrc .xinitrc
&gt;&gt; vim ~/.xinitrc
Add following
exec openbox-session
&gt;&gt; mkdir -p ~/.config/openbox
&gt;&gt; cp /etc/xdg/openbox/{rc.xml,menu.xml,autostart,environment} ~/.config/openbox
</code></pre>

<p>通过 <code>startx</code> 来启动测试openbox</p>

<p>使得slim生效, 并重启, 进出桌面时代&lt;进入桌面时代, 并不意味着就不再接触终端环境了, 由于openbox的菜单没有配置好, 尽管号称进入桌面时代, 但在很长一段时间内还要和终端打交道></p>

<pre><code class="bash">&gt;&gt; sudo systemctl enable slim.service
</code></pre>

<h3>About the Software in Openbox</h3>

<p>记录部分软件在Openbox中的安装和配置</p>

<ol>
<li>shell</li>
</ol>


<p>安装X环境下的shell执行器 <code>sudo pacman -S terminator</code></p>

<ol>
<li>gvim</li>
</ol>


<p>采用gvim更换vim <code>sudo pacman -S gvim</code></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media" title="Arch Linux Official Wiki on USB-Flash-Install-Media">ArchLinux Official Wiki USB Flash Install Media</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://wiki.archlinux.org/index.php/Beginners%27_guide" title="Arch Linux 官方用户新手指南">Arch Linux Official Wiki User Guide</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>

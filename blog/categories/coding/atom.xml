<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | 落寞纷飞]]></title>
  <link href="http://WinterXMQ.github.io/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://WinterXMQ.github.io/"/>
  <updated>2014-10-08T14:09:28+00:00</updated>
  <id>http://WinterXMQ.github.io/</id>
  <author>
    <name><![CDATA[WinterXMQ]]></name>
    <email><![CDATA[WinterXMQ@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在Html中由于打印按钮引起的风波]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/08/html-print-media/"/>
    <updated>2014-10-08T12:41:20+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/08/html-print-media</id>
    <content type="html"><![CDATA[<p>这是由打印问题引起的风波, 不过确实弥补了我对css的认识。</p>

<p><strong>问题描述:</strong> 在信息打印的界面上需要放置打印按钮或者其他提示性的东西, 然而在正式打印时这些信息又不应该输出(至少打印按钮是不应该出现的)。</p>

<p><strong>问题分析:</strong> 这个需求非常正常, 且不说是否每个人都找得到浏览器的打印按钮, 就单是放置那些不应该在正式文档中出现的操作或者其他的提示性信息也是非常有用的, 极大的方便了用户的使用, 至少不用天天听到别人请教打印方法(玩笑)。</p>

<p>正式开始分析, 从结果上来看, 打印前后的内容变化了。第一直观印象就是有两份材料, 打印前显示一份, 打印后显示一份, 这也是我早期时候的解决方法: 对放置在页面上的打印按钮绑定JS函数, 让JS函数把页面上的信息处理干净后调用浏览器的打印功能, 这种办法遇到电脑小白没有任何问题, 但就怕遇到懂行的, 不按常理出牌, 直接采用浏览器的打印功能, 一切玩儿玩儿; 第二种就是一份材料两种显示, 这种解决方案我一直没想过, 也没干往那边想, 在查完资料后发现CSS是支持这种特性的。</p>

<p><strong>解决方案:</strong> 采用CSS的<a href="http://www.w3.org/TR/css3-mediaqueries/" title="W3C Media Queries的标准">Media Queries</a>, 这个功能的作用在于使得网页在不同的媒体上有不一样的显示效果<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, 具体的内容见<a href="http://www.w3cplus.com/blogs/airen" title="Airen Blog">Airen的博客</a>。</p>

<p>在这里简单的介绍一下如何在用Media的功能来时间打印和分辨率这两个问题:</p>

<p>1.打印里面的问题最常出现的是前后显示的东西不同, 其实我们需要做的就是把正常显示的关闭、把正常不现实的打开就好了, 对这部分的块给定独立的样式, 再在定义打印媒体下面独立定义即可</p>

<pre><code class="css">@media print {
  noprint {
    display: none;
  }
}
</code></pre>

<p>2.当我们需要对待一些特殊分辨率的屏幕时(当浏览器的窗口关小了也一样), 我们主需要再创立一套针对这个分辨率的css样式即可, 不用在用JS, 把所有问题交给浏览器自己解决</p>

<pre><code class="css">@media screen and (max-width: 600px) {
  选择器 {
    属性: 属性值;
  }
}
</code></pre>

<p>参考文档:</p>

<ol>
<li>Airen 的 CSS3 Media Queries, <a href="http://www.w3cplus.com/content/css3-media-queries">http://www.w3cplus.com/content/css3-media-queries</a></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>看了CSS中关于Media的介绍后才豁然开朗, 以前用JS来解决屏幕大小的适应性问题用这种办法可以很简单的解决。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages搭建基于Octopress的Blog]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/09/21/github-pages/"/>
    <updated>2014-09-21T13:44:02+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/09/21/github-pages</id>
    <content type="html"><![CDATA[<p>把Blog的源码托管在Github上，采用Github的Pages功能来呈现</p>

<p>[TOC]</p>

<h1>配置git的ssh key</h1>

<pre><code class="bash">  &gt;&gt; ssh-keygen -t rsa -C "WinterXMQ@google.com"
  &gt;&gt; clip &lt; ~/.ssh/id_rsa.pub
</code></pre>

<p>在执行 <code>ssh-keygen</code> 后需要输入 <code>passphrase</code>
执行完两个命令后ssh的公钥就已经在系统的粘贴板上了，然后登陆Github的设置->添加ssh公钥上完成相关的添加
接着按照下面的指令完成相关的测试</p>

<pre><code class="bash">  &gt;&gt; ssh -T git@github.com
</code></pre>

<p>当出现如下的提示，则说明配置成功</p>

<pre><code class="bash">Enter passphrase for key '/home/xmq/.ssh/id_rsa': 
Hi WinterXMQ! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre>

<h1>配置本地的ruby和Jekyll、Octopress环境</h1>

<p>Octopress是基于Jekyll的，而Jekyll则是编写而成的，因此我们需要分别搭建这三个环境</p>

<h2>关于Ruby的安装配置</h2>

<p>网上有说需要保持ruby在某个版本上，根据我的测试，采用最新版本的ruby也同样没有问题，估计是早期的Jekyll对高版本的Ruby支持不好
在Arch Linux下采用 <code>pacman -S ruby</code> 完成Ruby的安装(默认Ruby已经安装)</p>

<p>Ruby 的官方源在国内的速度不佳，更换成淘宝的Ruby源</p>

<pre><code class="bash">  &gt;&gt; gem sources -a https://ruby.taobao.org/
  &gt;&gt; gem sources --remove https://rubygems.org/
  &gt;&gt; gem sources -l
</code></pre>

<p>注: 确保只有一条地址</p>

<p>采用 <code>sudo gem update --system</code> 更新gem脚本</p>

<h2>关于Jekyll和Octopress的安装</h2>

<p>Jekyll是Octopress的一个依赖，因此不用特意安装Jekyll
确保系统安装有 <code>Git</code>, 从Github上获取Octopress官方源码</p>

<pre><code class="bash">  &gt;&gt; cd Code
  &gt;&gt; git clone "git://github.com/imathis/octopress.git" blog
  &gt;&gt; cd blog
</code></pre>

<p>这个目录就是以后写Blog和发布Blog的工作目录</p>

<pre><code class="bash"> + _deploy      &lt;- 发布在Github上用于站点显示的master(gh-pages)分支
 + public
 + plugins      &lt;- 用于放置Octopress的插件
 + sass         &lt;- 似乎和模板的关系比较密切, 作用未知
 - source       &lt;- 放置站点源码, 包括Blog的Makedown文件
   ...
   + _posts     &lt;- 放置Blog的Makedown文件
 + .themes      &lt;- 放置主题的
 . _config.yml  &lt;- 站点总配置文件
 . Gemfile      &lt;- Octopress安装脚本配置
 . Rakefile     &lt;- Octopress控制脚本
</code></pre>

<p>Octopress是采用 <code>bundle</code> 来完成安装的, <code>bundle</code> 会读取当前目录下的 <code>Gemfile</code> 来获取本次安装的软件源、以及所需要安装的软件包, <code>bundle</code> 会给出一些软件的依赖关系, 并自动安装所依赖的软件
同时 <code>bundle</code> 也是Ruby的软件需要通过 <code>gem install bundler</code> 来完成安装
然而通过 <code>gem</code> 安装的软件会被安装在 <code>~/.gem/ruby/VERSION_RUBY/</code>, 需要添加环境变量</p>

<pre><code class="bash">  &gt;&gt; sudo vim /etc/profile
  add follow to the end of the file
    RUBY_HOME=~/.gem/ruby/2.1.0
    PATH=${PATH}:${RUBY_HOME}/bin
    export RUBY_HOME PATH
  &gt;&gt; source /etc/profile
  &gt;&gt; bundle --version
</code></pre>

<p>此外我们需要把 <code>Gemfile</code> 第一行的软件源换成<a href="https://ruby.taobao.org/">淘宝Ruby源</a> <code>source 'https://ruby.taobao.org/'</code>
然后执行 <code>bundle install</code>, 并耐性等待(当然采用国内的Ruby源, 安装时间不会太长)</p>

<h1>Blog工作目录与Github的设置</h1>

<p>无论是站点源码还是Blog都是采用git来管理, 需要把本地目录和Github做对接, 同时对站点进行最初步的设置</p>

<h2>与Github对接</h2>

<pre><code class="bash">  &gt;&gt; git remote rm origin           # 删除Octopress的远程分支
  &gt;&gt; rake setup_github_pages
    git@github.com:WinterXMQ/winterxmq.github.io.git
</code></pre>

<h2>站点初始化设置</h2>

<p>安装主题</p>

<pre><code class="bash">  &gt;&gt; git clone git@github.com:shashankmehta/greyshade.git .themes/greyshade
  &gt;&gt; echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss
  &gt;&gt; rake "install[greyshade]"
</code></pre>

<p>生成站点数据</p>

<pre><code class="bash">  &gt;&gt; rake generate
</code></pre>

<p>注: 在Jekyll编译的时候会出现错误, 提示没有Javascript的解释器, 这里有两三个解决方案, 我采用的是安装nodejs, 采用 <code>sudo pacman -S nodejs</code> 完成安装</p>

<p>通过 4000 端口在本地预览Blog站点, <a href="http://127.0.0.1:400">http://127.0.0.1:400</a></p>

<pre><code class="bash">  &gt;&gt; rake preview
</code></pre>

<h2>上传源码</h2>

<p>把源码上传到Github的同个工程的source分支下</p>

<pre><code class="bash">  &gt;&gt; git add .
  &gt;&gt; git commit -m "Init Octopress"
  &gt;&gt; git push origin source
</code></pre>

<h1>注意点</h1>

<h2>zsh引起无法新建Blog的问题</h2>

<p>解决在zsh下无法新建Blog的问题, 具体见参考文档5</p>

<pre><code class="bash">  &gt;&gt; rake new_post["arch-linux-reinstall-glibc.markdown"]
  zsh: no matches found: new_post[arch-linux-reinstall-glibc]
</code></pre>

<p>原因: zsh中若出现 &lsquo;*&rsquo;, &lsquo;(&rsquo;, &lsquo;|&rsquo;, &lsquo;&lt;&rsquo;, &lsquo;[&rsquo;, or &lsquo;?&rsquo; 符号, 则将其识别为查找文件名的通配符
解决办法:
+ rake &ldquo;new_post[arch-linux-reinstall-glibc.markdown]&rdquo;
+ rake new_post
+ vim .zshrc  添加 alias rake=&ldquo;noglob rake&rdquo;</p>

<h1>参考文档</h1>

<blockquote><ol>
<li><a href="http://blog.csdn.net/binyao02123202/article/details/20130891">http://blog.csdn.net/binyao02123202/article/details/20130891</a></li>
<li><a href="http://blog.cnyingchao.com/website/disqus-simplified-chinese.html">http://blog.cnyingchao.com/website/disqus-simplified-chinese.html</a></li>
<li><a href="http://xuhehuan.com/783.html">http://xuhehuan.com/783.html</a></li>
<li><a href="http://minejo.github.io/blog/2013/08/09/shi-yong-github-plus-octopresszuo-blog/">http://minejo.github.io/blog/2013/08/09/shi-yong-github-plus-octopresszuo-blog/</a></li>
<li><a href="http://fancyoung.com/blog/use-octopress-new-post-function-with-zsh/">http://fancyoung.com/blog/use-octopress-new-post-function-with-zsh/</a></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 落寞纷飞]]></title>
  <link href="http://WinterXMQ.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://WinterXMQ.github.io/"/>
  <updated>2014-11-16T09:48:17+00:00</updated>
  <id>http://WinterXMQ.github.io/</id>
  <author>
    <name><![CDATA[WinterXMQ]]></name>
    <email><![CDATA[WinterXMQ@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux上建立GIT服务器]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/13/git-server/"/>
    <updated>2014-11-13T15:37:28+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/13/git-server</id>
    <content type="html"><![CDATA[<p>建立GIT私有服务器</p>

<h1>取得客户端公钥</h1>

<p>在客户端上生成SSH key</p>

<pre><code class="bash">&gt;&gt; ssh-keygen -t rsa -C "your_email@example.com"
</code></pre>

<p>把公钥复制到粘贴板</p>

<pre><code class="bash">&gt;&gt; clip &lt; ~/.ssh/id_rsa.pub   ; Windows 上
&gt;&gt; echo ~/.ssh/id_rsa.pub     ; Linux 上
</code></pre>

<p>或者把公钥上传到Git服务器的<code>/tmp</code>目录下</p>

<pre><code class="bash">&gt;&gt; scp .ssh/id_rsa.pub user@&lt;host&gt;:/tmp
</code></pre>

<h1>配置服务器</h1>

<p>(1) 配置用户, 一般意义上而言, git用户是默认创建的, 如果没有就按照如下创建, 并给git用户指定密码, 以方便进入git用户配置</p>

<pre><code class="bash">&gt;&gt; sudo adduser -d /home/git -G httpd,users -m git
&gt;&gt; passwd git
</code></pre>

<p>(2) 配置用户默认目录</p>

<pre><code class="bash">&gt;&gt; sudo usermod -d /home/git git
&gt;&gt; sudo mkdir -p /home/git
&gt;&gt; sudo chown -R git:users /home/git
&gt;&gt; sudo chmod -R 700 /home/git
</code></pre>

<p>(3) 切换到git用户, 配置公钥</p>

<pre><code class="bash">&gt;&gt; su git
&gt;&gt; mkdir .ssh
&gt;&gt; cat /tmp/id_rsa.pub &gt;&gt; .ssh/authorized_keys
</code></pre>

<h1>创建库</h1>

<p>(1) 创建库文件夹</p>

<pre><code class="bash">&gt;&gt; mkdir -p INC/sns
&gt;&gt; chown -R git:users INC
</code></pre>

<p>(2) git 初始化</p>

<pre><code class="bash">&gt;&gt; cd INC/sns
&gt;&gt; git --bare init
</code></pre>

<h1>客户端配置</h1>

<p>建立本地库</p>

<pre><code class="bash">&gt;&gt; mkdir p &amp;&amp; cd p
&gt;&gt; git init
&gt;&gt; touch README
&gt;&gt; git add .                                        ; 加入提交等待列表
&gt;&gt; git cimmit -m "Init the project"                 ; 本地提交数据
&gt;&gt; git remote add origin git@&lt;host&gt;:INC/sns         ; 增加远程分支
&gt;&gt; git push origin master                           ; 推送数据
&gt;&gt; git brach --set-upstream-to=origin/master master ; 跟踪分支
</code></pre>

<h1>问题</h1>

<p>(1) 在推送的过程中出现如下问题</p>

<pre><code class="bash">Permissions 0644 for ‘/root/.ssh/id_rsa’ are too open
</code></pre>

<p>需要把 <code>.ssh/id_rsa</code> 的权限降到 0600</p>

<pre><code class="bash">&gt;&gt; chmod 600 ~/.ssh/id_rsa
</code></pre>

<p>(2) 在CyWin中, 无论怎么使用上一条命令都无法修改<code>.ssh/id_rsa</code>的权限到0600,其原因是CyWin中的文件属性中没有group属性, 全为None, 因此做如下修改</p>

<pre><code class="bash">&gt;&gt; chown -R ming:users ~/.ssh/
</code></pre>

<p>(3) 无论怎么配置都只能使用密码登录, 会出现 <code>Permission denied (publickey..)</code> 的错误, 其原因是权限问题, 按如下权限修改</p>

<p>服务器上</p>

<pre><code class="bash">/home/git                       0700
/home/git/.ssh                  0755
/home/git/.ssh/authorized_keys  0600
</code></pre>

<p>本机上</p>

<pre><code class="bash">/home/users/.ssh/id_rsa.pub     0600
</code></pre>

<p>(*) 如果已经配置了git用户, 则需要配置默认shell, 以防止git用户登陆计算机</p>

<pre><code class="bash">&gt;&gt; sudo usermod -s /usr/bin/git-shell git
</code></pre>

<p>(**) 如果希望增加 http 或者 https 协议的 Git 服务器, 参考<a href="http://www.cnblogs.com/dudu/archive/2012/12/09/linux-apache-git.html">Apache上搭建git服务器</a></p>

<h1>参考</h1>

<blockquote><p>[1] <a href="http://www.cppblog.com/gezidan/archive/2011/08/19/153826.html">密钥不识别, 无法登陆</a></p>

<p>[2] <a href="http://www.th7.cn/system/win/201311/46849.shtml">CygWin上无法修改权限</a></p>

<p>[3] <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000">安装指导</a></p>

<p>[4] <a href="http://keben1983.blog.163.com/blog/static/143638081201242511182844/">公钥无法登陆</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArchLinux上磁盘扩展]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/10/extend-volume/"/>
    <updated>2014-11-10T14:13:44+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/10/extend-volume</id>
    <content type="html"><![CDATA[<p>问题: 在VBox上创建ArchLinux虚拟机的时候就想着如果硬盘不够用, 就到时候再想办法扩容, 因此当时就只搞了8G的硬盘, 其中还有1G的Swap分区; 没想到这个问题这么快就出现了, 因此就有了一下的解决方案</p>

<p>问题分析:</p>

<p>由于虚拟磁盘采用的是 <code>VirtualBox Disk Image</code>, 同时在ArchLinux中没有逻辑磁盘(LVM)还有就是就是系统只有单个分区, 所以不适合采用另加磁盘的挂载方式来解决。</p>

<p>问题解决方案:</p>

<p>总体方案: 给 <code>/</code> 分区扩容, 分两步, 1) 先给虚拟磁盘扩容; 2) 再想办法给 <code>/</code> 分区扩容</p>

<h1>VBox 的虚拟磁盘扩容</h1>

<p>在 VBox 中有一个管理工具可以对磁盘扩容, 支持命令行, 操作更加简便</p>

<p>查看 VBox 下注册的虚拟磁盘</p>

<pre><code class="bash">&gt;&gt; VBoxManage list hdds
UUID:           a314bb2f-c879-4e1d-9669-251a5e49f54f
Parent UUID:    base
State:          locked write
Type:           normal (base)
Location:       C:\OS\Arch_Box\ArchV.vdi
Storage format: VDI
Capacity:       20480 MBytes
</code></pre>

<p>便可得到磁盘的UUID为 a314bb2f-c879-4e1d-9669-251a5e49f54f</p>

<p>使用磁盘的UUID给磁盘扩容</p>

<pre><code class="bash">&gt;&gt; VBoxManage modifyhd a314bb2f-c879-4e1d-9669-251a5e49f54f --resize 20480
</code></pre>

<p>此时磁盘中被扩展的那部分空间还没被分配, 需要在系统中操作</p>

<h1>分区扩展</h1>

<p>虽然说ext4分区的收缩和扩展技术是成熟的, 但由于之前的分区是老版的cfdisk创建的, 引导区的大小是62个扇区, 分区是从63扇区开始的, 而现在所有的Linux上的工具都默认从2048个扇区开始分配空间, 因此会造成根分区被删除后重建时, 分区上的数据信息会丢失, 目前对此没有找到可行的方案; 因此采用如下方案, 同时也会记录原方案, 方便以后对2,3,4分区的扩展; 采用的方案是: 采用Linux的逻辑卷(LVM)的管理办法。</p>

<h2>LVM解决方案</h2>

<p>简单的说就是重构现在的磁盘结构, 全面换成LVM磁盘</p>

<p>(1) 创建一个新磁盘, 和安装盘一起连接到虚拟机上, 重启, 进入安装系统</p>

<p>(2) 开始新磁盘的分区操作</p>

<p>由于要采用LVM的磁盘管理办法, 首先要对安装系统做如下操作</p>

<p>安装lvm2</p>

<pre><code class="bash">&gt;&gt; pacman -Syy
&gt;&gt; pacman -S lvm2
</code></pre>

<p>加载 dm_mod</p>

<pre><code class="bash">&gt;&gt; modprobe dm_mod
</code></pre>

<p>物理分区, 和以前一样, 这次采用fdisk来处理</p>

<pre><code class="bash">&gt;&gt; fdisk /dev/sdb
Command (m for help): n
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-41943039, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-41943039, default 41943039):

Created a new partition 1 of type 'Linux' and of size 20 GiB.

Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 8e
Changed type of partition 'Linux' to 'Linux LVM'.

Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

&gt;&gt; fdisk -l /dev/sdb

Disk /dev/sdb: 20 GiB, 21474836480 bytes, 41943040 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x00000000

Device    Boot Start       End   Blocks  Id System
/dev/sdb1       2048  41943039 20970496  8e Linux LVM
</code></pre>

<p>开始设置LVM磁盘系统</p>

<p>创建物理卷 Physical Volume</p>

<pre><code class="bash">&gt;&gt; pvcreate /dev/sdb1
&gt;&gt; pvdisplay
--- Physical volume ---
  PV Name               /dev/sda1
  VG Name               root
  PV Size               20.00 GiB / not usable 3.00 MiB
  Allocatable           yes (but full)
  PE Size               4.00 MiB
  Total PE              5119
  Free PE               0
  Allocated PE          5119
  PV UUID               BduFVm-tKMn-JDPf-b1U8-vcs8-8YDk-FNsW0e
</code></pre>

<p>创建卷组 Volume Group</p>

<pre><code class="bash">&gt;&gt; vgcreate root /dev/sdb1
&gt;&gt; vgdisplay
  --- Volume group ---
  VG Name               root
  System ID
  Format                lvm2
  Metadata Areas        1
  Metadata Sequence No  2
  VG Access             read/write
  VG Status             resizable
  MAX LV                0
  Cur LV                1
  Open LV               1
  Max PV                0
  Cur PV                1
  Act PV                1
  VG Size               20.00 GiB
  PE Size               4.00 MiB
  Total PE              5119
  Alloc PE / Size       5119 / 20.00 GiB
  Free  PE / Size       0 / 0
  VG UUID               kROehq-qYhI-U21s-Guaq-FFns-bv3R-8cIzDA
</code></pre>

<p>创建逻辑卷 Logical Volume, 及以后操作的卷</p>

<pre><code class="bash">&gt;&gt; lvcreate -l +100%FREE root -n root
&gt;&gt; lvdisplay
  --- Logical volume ---
  LV Path                /dev/root/root
  LV Name                root
  VG Name                root
  LV UUID                YtEeaf-sqJJ-8VAq-MdYo-es8Q-uTtO-QulEHJ
  LV Write Access        read/write
  LV Creation host, time archiso, 2014-11-10 03:41:50 +0000
  LV Status              available
  # open                 1
  LV Size                20.00 GiB
  Current LE             5119
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           254:0
</code></pre>

<p>(3) 磁盘格式化, 选定磁盘系统(和以前一样)</p>

<pre><code class="bash">&gt;&gt; mkfs.ext4 /dev/mapper/root-root
</code></pre>

<p>(4) 拷贝数据(不建议挂载磁盘后用cp命令来执行, 建议采用如下命令完成, 虽然步骤有点多, 但胜在可靠)</p>

<p>采用 <code>dd</code> 来镜像拷贝磁盘</p>

<pre><code class="bash">&gt;&gt; dd if=/dev/sda1 of=/dev/mapper/root-root
</code></pre>

<p>这时候你用 <code>df -h</code> 去查看 <code>/dev/mapper/root-root</code> 的容量时会发现 <code>/dev/mapper/root-root</code> 的磁盘大小和 <code>/dev/sda1</code> 的是一样的, 由于拷贝的时候连同分区表信息都一起拷贝过来了(这个问题还是在正式进入系统后才发现的), 需要做如下处理来扩展磁盘</p>

<pre><code class="bash">&gt;&gt; resize2fs /dev/mapper/root-root 20476M
</code></pre>

<p>(5) 新系统设置</p>

<p>生成新的分区表信息</p>

<pre><code class="bash">&gt;&gt; genfstab -U -p /mnt
</code></pre>

<p>把生成的信息写入 <code>/etc/fstab</code>, 删除以前的分区信息</p>

<p>进入新系统</p>

<pre><code class="bash">&gt;&gt; arch-chroot /mnt/new /bin/zsh
</code></pre>

<p>设置系统内核, 配合LVM文件系统</p>

<pre><code class="bash">&gt;&gt; vim /etc/mkinitcpio.conf
</code></pre>

<p>确保 udev 和 lvm2 被 mkinitcpio 加载, 确保 lvm2 在 block 和 filesystem 之间</p>

<pre><code class="bash">HOOKS="base udev ... block lvm2 filesystems"
</code></pre>

<p>以及确保 dm-mod 被加载</p>

<pre><code class="bash">MODULES="dm_mod ..."
</code></pre>

<p>安装系统引导</p>

<pre><code class="bash">&gt;&gt; grub-install --modules=lvm --target=i386-pc --recheck /dev/sda
</code></pre>

<p>会出现如下错误, 是由于/run在arch-chroot环境下不可用导致的, 但不会影响正常安装</p>

<pre><code class="bash">  /run/lvm/lvmetad.socket: connect failed: No such file or directory
  WARNING: Failed to connect to lvmetad. Falling back to internal scanning.
</code></pre>

<p>更新grub列表</p>

<pre><code class="bash">&gt;&gt; grub-mkconfig -o /boot/grub/grub.cfg
</code></pre>

<p>在正式进入系统后, 再重新执行一边</p>

<h2>Basic 解决方案</h2>

<p>简单的来说就是基于基本磁盘的收缩和扩容方案, 这个方法在这里不适用的原因是前后引导区的大小不一致(扩容时需要把分区删掉重建, 由于删除重建前后的引导区大小不一致, 使得分区起始位置不同, 而导致的分区信息丢失, 磁盘类别不可识别, 引起扩容失败), 但对于第2, 3, 4分区的扩容以及引导分区大小不会变化的磁盘, 此方案可行, 已测试过</p>

<p>(1) 收缩磁盘</p>

<pre><code class="bash">&gt;&gt; resize2fs /dev/sdaX size
</code></pre>

<p>注意: 1) size 小于实际分区大小且大于已用大小; 2) 此命令可能造成数据丢失, 谨慎操作; 3) 操作前, 可用 <code>e2fsck -f /dev/sdaX</code> 强制检查磁盘</p>

<p>(2) 扩充磁盘</p>

<p>采用 <code>fdisk /dev/sdaX</code> 来删除重建分区, 只要初始位置不变, 容量扩大, 不必担心删除时数据丢失, 之后再适用上条命令完成磁盘扩容</p>

<h1>参考</h1>

<blockquote><p>[1] <a href="http://www.2cto.com/os/201306/222822.html">http://www.2cto.com/os/201306/222822.html</a></p>

<p>[2] <a href="https://wiki.archlinux.org/index.php/Lvm">https://wiki.archlinux.org/index.php/Lvm</a></p>

<p>[3] <a href="http://www.byywee.com/page/M0/S834/834847.html">http://www.byywee.com/page/M0/S834/834847.html</a></p>

<p>[4] <a href="http://bbs.chinaunix.net/thread-1972006-1-1.html">http://bbs.chinaunix.net/thread-1972006-1-1.html</a></p>

<p>[5] <a href="http://linux.cn/article-3218-1.html">http://linux.cn/article-3218-1.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 安装Aur包管理器Yaourt]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/09/yaourt/"/>
    <updated>2014-11-09T06:07:30+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/09/yaourt</id>
    <content type="html"><![CDATA[<p>(1) 安装Yourt包管理器, 首先添加软件源, <code>sudo vim /etc/pacman.conf</code>, 在文件尾增加如下内容</p>

<pre><code class="bash">[archlinuxcn]
# The Chinese Arch Linux communities packages.
SigLevel = Optional TrustAll
Server   = http://repo.archlinuxcn.org/$arch
</code></pre>

<p>(2) 更新缓存, <code>sudo pacman -Syy</code></p>

<p>(3) 安装Yourt, <code>sudo pacman -S yaourt</code></p>

<p>(4) 安装Aurvote, <code>sudo pacman -S aurvote</code></p>

<p>(5) 配置aurvote, <code>aurvote --configure</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 下FTP服务器的搭建]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/08/ftp-setup/"/>
    <updated>2014-11-08T16:10:51+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/08/ftp-setup</id>
    <content type="html"><![CDATA[<p>为了方便BBS测试的文件上传, 就此搭建FTP服务器</p>

<h1>Install</h1>

<p>安装 <code>vsftpd</code></p>

<pre><code class="bash">&gt;&gt; sudo pacman -S vsftpd
</code></pre>

<p>启动 vsftpd 和 设置开机自启</p>

<pre><code class="bash">&gt;&gt; sudo systemctl enable vsftpd
&gt;&gt; sudo systemctl start vsftpd
</code></pre>

<h1>Configuration</h1>

<p>大多数的设置在 <code>/etc/vsftpd.conf</code>, 打开配置文件</p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/vsftpd.conf
</code></pre>

<p>启用上传功能, <code>write_enable=YES</code></p>

<p>开启本地用户登录功能, <code>local_enable=YES</code></p>

<p>开启IPV6支持</p>

<pre><code class="bash">listen=NO
listen_ipv6=YES
</code></pre>

<p>自定义端口, 增加配置 <code>listen_port=2211</code>, 打开防火墙</p>

<pre><code class="bash">iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 2211 -j ACCEPT
</code></pre>

<p>增加用户设置</p>

<pre><code class="bash">&gt;&gt; sudo htpasswd -c /etc/vsftpd/.passwd Username
New password:
Re-type new password:
</code></pre>

<p>若以后想增加用户, 可以使用 <code>sudo htpasswd /etc/vsftpd/.passwd Username</code></p>

<p>这种方式增加的用户应该是不能被认证的, 用如下命令生成的密码替换</p>

<pre><code class="bash">&gt;&gt; openssl passwd -1
</code></pre>

<p>向PAM service注册认证数据库, <code>sudo vim /etc/pam.d/vsftpd</code>, 并增加如下内容</p>

<pre><code class="bash">auth required pam_pwdfile.so pwdfile /etc/vsftpd/.passwd
account required pam_permit.so
</code></pre>

<p>同时需要安装PAM对pwdfile的认证支持库, <code>sudo yaout pam_pwdfile</code>, Yaourt的安装见<a href="/blog/2014/11/09/yaourt/">Arch Linux 安装Aur包管理器Yaourt</a></p>

<p>在系统中增加ftp虚拟用户</p>

<pre><code class="bash">&gt;&gt; sudo useradd -d /srv/ftp -s/usr/bin/nologin -G ftp -M ftp
</code></pre>

<p>更改文件夹的所有人, <code>sudo chown -R ftp:ftp /srv/ftp</code></p>

<p>配置文件里增加如下信息</p>

<pre><code class="bash"># pointing to the correct PAM service file
pam_service_name=vsftpd
write_enable=YES
hide_ids=YES
listen=YES
connect_from_port_20=YES
anonymous_enable=NO
local_enable=YES
dirmessage_enable=YES
xferlog_enable=YES
chroot_local_user=YES
guest_enable=YES
guest_username=virtual
virtual_use_local_privs=YES
</code></pre>

<p>在用的过程中发现 FTP 不支持软链接的方式, 因此换成mount的方式来实现</p>

<pre><code class="bash">&gt;&gt; sudo mount --bind /path/to/source /srv/ftp/
</code></pre>

<p>======================Add @2014/11/15 ===============================</p>

<p>在使用中发现, 只有命令和FTP工具(xftp)可以连接, Windows资源管理器、浏览器都不能访问, 查阅资料后发现是由于FTP的数据传输方式导致的, FTP的被动模式要求服务器能放过高端口的数据传输的包, 在测试中本机无法搞定ip_conntrack模式的配置, 只能限制FTP数据传输的端口, 并在防火墙上开放对应端口</p>

<p>在Vsftp上限制端口, <code>sudo vim /etc/vsftp.conf</code>, 在文件尾部增加如下部分</p>

<pre><code class="bash">pasv_min_port=2222
pasv_max_port=2225
</code></pre>

<p>并开放这些端口</p>

<pre><code class="bash">&gt;&gt; sudo iptables -A INPUT -p tcp --dport 2222:2225 -j ACCEPT
</code></pre>

<p>接着重启vsftpd服务器就行了</p>

<p>=======================Add @2014/11/16 ==============================</p>

<p>同时发现PSAV模式上传的时候, 发现无法上传和修改文件, 只能下载, 因此做如下修改</p>

<p>打开配置文件, <code>sudo vim /etc/vsftp.conf</code></p>

<pre><code class="bash">pasv_enable=YES
</code></pre>

<h1>参考</h1>

<blockquote><p>(1) <a href="https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon">https://wiki.archlinux.org/index.php/Very_Secure_FTP_Daemon</a></p>

<p>(2) <a href="http://www.cnblogs.com/acpp/archive/2010/02/08/1665876.html">http://www.cnblogs.com/acpp/archive/2010/02/08/1665876.html</a></p>

<p>(3) <a href="http://blog.chinaunix.net/uid-26263042-id-3230479.html">http://blog.chinaunix.net/uid-26263042-id-3230479.html</a></p>

<p>(4) <a href="http://blog.csdn.net/moreorless/article/details/5289147">http://blog.csdn.net/moreorless/article/details/5289147</a></p>

<p>(5) <a href="http://www.2cto.com/os/201307/227994.html">http://www.2cto.com/os/201307/227994.html</a></p>

<p>(6) <a href="http://blog.csdn.net/highball/article/details/8521954">http://blog.csdn.net/highball/article/details/8521954</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BBS的本地测试环境的搭建]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/11/04/test-for-bbs/"/>
    <updated>2014-11-04T14:29:56+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/11/04/test-for-bbs</id>
    <content type="html"><![CDATA[<p>本地环境的LAMP环境安装见<a href="/blog/2014/10/28/lamp/">ArchLinux上搭建LAMP环境</a></p>

<p>这个地方主要讲bbs的备份和本地还原</p>

<h1>服务器备份</h1>

<p>文档数据的备份</p>

<pre><code class="bash">&gt;&gt; cd /var/www
&gt;&gt; tar czvf sns-data.tar.gz sns/
</code></pre>

<p>数据库的备份</p>

<pre><code class="bash">&gt;&gt; mysqldump -hHOSTNAME -uUSER -pPASSWORD DATABASENAME &gt; sns-date.sql
&gt;&gt; du -h sns-date.sql       ; 查看文件大小
</code></pre>

<h1>本地还原</h1>

<p>文档数据还原</p>

<pre><code class="bash">&gt;&gt; rm -rf /srv/http/*
&gt;&gt; tar zxvf sns-date.tar.gz -C /srv/http/sns
</code></pre>

<p>数据库还原</p>

<pre><code class="bash">&gt;&gt; mysql -uUSER -p
mysql&gt; create database `sns`;
mysql&gt; exit
Bye
&gt;&gt; mysql -uUSER -p sns &lt; sns-date.sql
</code></pre>

<h1>本地配置</h1>

<p>(1) 虚拟主机配置</p>

<p>以ArchLinux为例, apache是ArchLinux的默认安装</p>

<p>打开配置文件, <code>sudo vim /etc/httpd/conf/extra/httpd-vhosts.conf</code>, 做如下修改</p>

<pre><code class="bash">&lt;VirtualHost *:80&gt;
    DocumentRoot "/srv/http/sns"
    ServerName "bbs.winterxq.me"
    &lt;Directory "/srv/http/sns"&gt;
        Options Indexes FollowSymLinks
        AllowOverride None
        Order allow,deny
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>重启服务, <code>sudo systemctl restart httpd</code></p>

<p>(2) 设置apache和mysql的开机自启</p>

<pre><code class="bash">&gt;&gt; sudo systemctl enable httpd
&gt;&gt; sudo systemctl enable mysqld
</code></pre>

<p>(3) 设置文件夹所有权</p>

<pre><code class="bash">&gt;&gt; sudo chown -R http:http data/
&gt;&gt; sudo chown -R http:http config/
&gt;&gt; sudo chown -R http:http uc_server/data/
&gt;&gt; sudo chown -R http:http uc_client/data/cache/
</code></pre>
]]></content>
  </entry>
  
</feed>

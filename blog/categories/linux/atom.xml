<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 落寞纷飞]]></title>
  <link href="http://WinterXMQ.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://WinterXMQ.github.io/"/>
  <updated>2014-11-04T12:26:16+00:00</updated>
  <id>http://WinterXMQ.github.io/</id>
  <author>
    <name><![CDATA[WinterXMQ]]></name>
    <email><![CDATA[WinterXMQ@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux中的正则表达式]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/31/shell-regular/"/>
    <updated>2014-10-31T12:18:44+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/31/shell-regular</id>
    <content type="html"><![CDATA[<p>POSIX<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 定义了两种正则表达式语法:</p>

<p>1) BRE 基本正则表达式(Basic Regular Expression);</p>

<p>2) ERE 扩展的正则表达式(Extended Regular Expression)</p>

<p>大多数的Linux程序符合BRE规则</p>

<p><code>sed</code> 只支持大部分 BRE, 因为主要是受到速度的限制;</p>

<p><code>grep</code> 可以支持 ERE, 只是需要增加额外参数 <code>-E</code></p>

<p><code>gwak</code> 使用 BRE</p>

<h1>Regular Expression 中的基本字符集</h1>

<p>BRE定义语法符号</p>

<table>
<thead>
<tr>
<th style="text-align:left;">符号    </th>
<th style="text-align:left;"> 模式含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">. </td>
<td style="text-align:left;"> 匹配任何一个字符</td>
</tr>
<tr>
<td style="text-align:left;">[] </td>
<td style="text-align:left;"> 字符集匹配</td>
</tr>
<tr>
<td style="text-align:left;">[^] </td>
<td style="text-align:left;"> 字符集(取反)匹配</td>
</tr>
<tr>
<td style="text-align:left;">^ </td>
<td style="text-align:left;"> 匹配开始位置</td>
</tr>
<tr>
<td style="text-align:left;">$ </td>
<td style="text-align:left;"> 匹配结束位置</td>
</tr>
<tr>
<td style="text-align:left;">() </td>
<td style="text-align:left;"> 定义子表达式</td>
</tr>
<tr>
<td style="text-align:left;">\n </td>
<td style="text-align:left;"> 子表达式向前引用, 即表示重复, n在{1,9}之间</td>
</tr>
<tr>
<td style="text-align:left;">* </td>
<td style="text-align:left;"> 多次或者重复匹配(包括0次重复)</td>
</tr>
<tr>
<td style="text-align:left;">\ </td>
<td style="text-align:left;"> 转义符</td>
</tr>
<tr>
<td style="text-align:left;">[] </td>
<td style="text-align:left;"> 匹配括号内出现的字符, 如 [a-zA-Z0123]</td>
</tr>
<tr>
<td style="text-align:left;">p{n} </td>
<td style="text-align:left;"> 匹配p出现n次</td>
</tr>
<tr>
<td style="text-align:left;">p{n,} </td>
<td style="text-align:left;"> 匹配p至少出现n次</td>
</tr>
<tr>
<td style="text-align:left;">p{n,m} </td>
<td style="text-align:left;"> 匹配所有p出现的次数大于n小于m的情况</td>
</tr>
</tbody>
</table>


<p>ERE修改的语法符号</p>

<table>
<thead>
<tr>
<th style="text-align:left;">符号 </th>
<th style="text-align:center;"> 状态 </th>
<th style="text-align:left;"> 模式含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">? </td>
<td style="text-align:center;"> 新增 </td>
<td style="text-align:left;"> 多次匹配(包括0次)</td>
</tr>
<tr>
<td style="text-align:left;">+ </td>
<td style="text-align:center;"> 新增 </td>
<td style="text-align:left;"> 至少一次匹配</td>
</tr>
<tr>
<td style="text-align:left;"></td>
<td style="text-align:center;"> </td>
<td style="text-align:left;"> 新增 | 或运算, 匹配两个子表达式的合集</td>
</tr>
<tr>
<td style="text-align:left;">() /{m,n} </td>
<td style="text-align:center;"> 修改 </td>
<td style="text-align:left;"> <strong>注释:</strong> 不需要转义 (, ), {, } 这些符号</td>
</tr>
<tr>
<td style="text-align:left;">\n </td>
<td style="text-align:center;"> 取消 </td>
<td style="text-align:left;"> &hellip;&hellip;</td>
</tr>
</tbody>
</table>


<p>BRE 和 ERE 共享, 额外的一些定义:</p>

<p>特殊符号:</p>

<p>表一:</p>

<table>
<thead>
<tr>
<th style="text-align:left;">POSIX类 </th>
<th style="text-align:center;"> perl类 </th>
<th style="text-align:left;"> 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">[:alnum:] </td>
<td style="text-align:center;">    </td>
<td style="text-align:left;"> 数字集+字母集</td>
</tr>
<tr>
<td style="text-align:left;">[:alpha:] </td>
<td style="text-align:center;"> \a </td>
<td style="text-align:left;"> 字母集</td>
</tr>
<tr>
<td style="text-align:left;">[:lower:] </td>
<td style="text-align:center;"> \l </td>
<td style="text-align:left;"> 小写字母集</td>
</tr>
<tr>
<td style="text-align:left;">[:upper:] </td>
<td style="text-align:center;"> \u </td>
<td style="text-align:left;"> 大写字母集</td>
</tr>
<tr>
<td style="text-align:left;">[:blank:] </td>
<td style="text-align:center;">    </td>
<td style="text-align:left;"> 空白字符集(空格+制表符)</td>
</tr>
<tr>
<td style="text-align:left;">[:space:] </td>
<td style="text-align:center;"> \s </td>
<td style="text-align:left;"> 所有空白字符(包括[:blank:])</td>
</tr>
<tr>
<td style="text-align:left;">[:cntrl:] </td>
<td style="text-align:center;">    </td>
<td style="text-align:left;"> 不可打印的控制字符集(退格, 删除&hellip;.)</td>
</tr>
<tr>
<td style="text-align:left;">[:digit:] </td>
<td style="text-align:center;"> \d </td>
<td style="text-align:left;"> 十进制数字</td>
</tr>
<tr>
<td style="text-align:left;">[:xdigit:] </td>
<td style="text-align:center;"> \x </td>
<td style="text-align:left;"> 十六进制数字</td>
</tr>
<tr>
<td style="text-align:left;">[:graph:] </td>
<td style="text-align:center;">    </td>
<td style="text-align:left;"> 可打印的非空白字符</td>
</tr>
<tr>
<td style="text-align:left;">[:print:] </td>
<td style="text-align:center;"> \p </td>
<td style="text-align:left;"> 可打印的字符</td>
</tr>
<tr>
<td style="text-align:left;">[:pumct:] </td>
<td style="text-align:center;">    </td>
<td style="text-align:left;"> 标点符号</td>
</tr>
</tbody>
</table>


<p>表二:</p>

<table>
<thead>
<tr>
<th style="text-align:center;">perl类 </th>
<th style="text-align:left;"> 等效POSIX </th>
<th style="text-align:left;"> 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">\o </td>
<td style="text-align:left;"> [0-7] </td>
<td style="text-align:left;"> 八进制数字</td>
</tr>
<tr>
<td style="text-align:center;">\O </td>
<td style="text-align:left;"> [^0-7] </td>
<td style="text-align:left;"> 非八进制</td>
</tr>
<tr>
<td style="text-align:center;">\w </td>
<td style="text-align:left;"> [[:alnum:]] </td>
<td style="text-align:left;"> 单词</td>
</tr>
<tr>
<td style="text-align:center;">\W </td>
<td style="text-align:left;"> [^[:alnum:]] </td>
<td style="text-align:left;"> 非单词</td>
</tr>
<tr>
<td style="text-align:center;">\A </td>
<td style="text-align:left;"> [^[:alphha:]] </td>
<td style="text-align:left;"> 非字母</td>
</tr>
<tr>
<td style="text-align:center;">\L </td>
<td style="text-align:left;"> [^[:lower:]] </td>
<td style="text-align:left;"> 非小写字母</td>
</tr>
<tr>
<td style="text-align:center;">\U </td>
<td style="text-align:left;"> [^[:upper:]] </td>
<td style="text-align:left;"> 非大写字母</td>
</tr>
<tr>
<td style="text-align:center;">\S </td>
<td style="text-align:left;"> [^[:space:]] </td>
<td style="text-align:left;"> 非空白字符</td>
</tr>
<tr>
<td style="text-align:center;">\D </td>
<td style="text-align:left;"> [^[:digit:]] </td>
<td style="text-align:left;"> 非十进制数字</td>
</tr>
<tr>
<td style="text-align:center;">\X </td>
<td style="text-align:left;"> [^[:xdigit:]] </td>
<td style="text-align:left;"> 非十六进制数字</td>
</tr>
<tr>
<td style="text-align:center;">\P </td>
<td style="text-align:left;"> [^[:print:]] </td>
<td style="text-align:left;"> 非可打印字符</td>
</tr>
</tbody>
</table>


<p>一些特殊定义:</p>

<p>转义定义: <code>\r</code> (回车), <code>\n</code> (换行), <code>\b</code> (退格), <code>\t</code> (制表符), <code>\v</code> (垂直制表符), <code>\"</code> 和 <code>\'</code></p>

<h1>Regular Express 使用例子</h1>

<p>1) 匹配任何单一字符(ASCII) <code>.</code></p>

<p>2) 匹配行首 <code>^</code>, 例子如下</p>

<pre><code class="bash">&gt;&gt; ls -l | grep '^d'
drwxr-xr-x 6 xmq users   4096 10月 12 15:53 Code/
drwxr-xr-x 2 xmq users   4096 9月  30 02:41 pic/
</code></pre>

<p>3) 匹配行尾 <code>$</code></p>

<pre><code class="bash">^$   ---  匹配空行
^.%  ---  匹配单字符行
</code></pre>

<p>4) 匹配重复字符 <code>*</code></p>

<pre><code class="bash">ro*t  &lt;- 其中 rot, root, rooot 都符合其匹配结果
</code></pre>

<p>5) 特殊字符, 需要转义 <code>\</code></p>

<p>6) 匹配一个范围 <code>[]</code></p>

<pre><code class="bash">[0-9] or [0123456789]       &lt;- 匹配数字
[a-zA-Z]                    &lt;- 匹配所有大小写字母
[a-zA-Z0-9]                 &lt;- 匹配字母和数字
[a-zA-Z]*                   &lt;- 匹配所有单词
</code></pre>

<p>注意: 在 <code>[]</code> 中, <code>^</code> 表示否定的意思</p>

<pre><code class="bash">[^A-Za-z]                   &lt;- 匹配非字母
[^0-9]                      &lt;- 匹配非数字
</code></pre>

<p>7) 匹配重复出现多次 <code>\{\}</code></p>

<pre><code class="bash">A\{2\}B                     &lt;- 匹配 AAB
A\{2,\}B                    &lt;- 匹配 AAB AAAB AAAAB ...
A\{2,3\}B                   &lt;- 匹配 AAB AAAB
</code></pre>

<h1>参考文档</h1>

<p>1) <a href="http://blog.csdn.net/wklken/article/details/6429526">http://blog.csdn.net/wklken/article/details/6429526</a></p>

<p>2) <a href="http://blog.chinaunix.net/uid-23045379-id-2562051.html">http://blog.chinaunix.net/uid-23045379-id-2562051.html</a></p>

<p>3) <a href="http://blog.csdn.net/a627088424/article/details/15435873">http://blog.csdn.net/a627088424/article/details/15435873</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Portable Operating System Interface, 即可移植操作系统接口, 定义了操作系统应该为应用程序提供的接口标准, 是IEEE为要在各种UNIX操作系统上运行的软件而定义的一系列API标准的总称, 其正式称呼为IEEE 1003, 而国际标准名称为ISO/IEC 9945, 信息来自<a href="http://baike.baidu.com/view/209573.htm?fr=aladdin">百度百科</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArchLinux上搭建LAMP环境]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/28/lamp/"/>
    <updated>2014-10-28T05:37:56+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/28/lamp</id>
    <content type="html"><![CDATA[<p>为了给基于Discuz模板的BBS增加一个小功能而在本地ArchLinux虚拟机里搭建一个BBS的测试平台</p>

<h1>Apache And PHP Installation</h1>

<p>分别安装 apache php 和 php-apache组件</p>

<pre><code class="bash">&gt;&gt; sudo pacman -S apache php php-apache
</code></pre>

<p>启动 apache, <code>sudo systemctl start httpd</code></p>

<p>测试 php 环境</p>

<pre><code class="bash">&gt;&gt; sudo vim /srv/http/info.php
</code></pre>

<p>在文件中写下如下信息</p>

<pre><code class="php">&lt;?php phpinfo(); ?&gt;
</code></pre>

<p>打开网页测试效果</p>

<p>测试结果未生效, 在 apache 中启用 php</p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/httpd/conf/httpd.conf
</code></pre>

<p>查找 <code>LoadModule dir_module modules/mod_dir.so</code> 下增加</p>

<pre><code class="bash">LoadModule php5_module modules/libphp5.so
</code></pre>

<p>同时在 <code>Include</code> 列表末尾增加</p>

<pre><code class="bash">Include conf/extra/php5_module.conf
</code></pre>

<p>由于在 ArchLinux 中 php-apache 下的 libphp5.so 无法和 mod_mpm_event 一起工作, 会有如下错误</p>

<pre><code class="bash">Apache is running a threaded MPM, but your PHP Module is not compiled to be threadsafe.  You need to recompile PHP.
AH00013: Pre-configuration failed
httpd.service: control process exited, code=exited status=1
</code></pre>

<p>有如下两种解决办法:</p>

<p>1) 对 apache php 等重新编译, 启用 thread safety(没试过)</p>

<p>2) 采用替换方法</p>

<p>使用 mod_mpm_prefork, 打开 <code>/etc/httpd/conf/httpd.conf</code>, 把</p>

<pre><code class="bash">LoadModule mpm_event_module modules/mod_mpm_event.so
</code></pre>

<p>替换成</p>

<pre><code class="bash">LoadModule mpm_prefork_module modules/mod_mpm_prefork.so
</code></pre>

<p>重启 apache, <code>sudo systemctl restart httpd</code>, 打开网页测试 <code>info.php</code> 页面, 看到如下画面说明 PHP 启用成功</p>

<p><img src="http://img.vim-cn.com/85/64208227801a398d079fc7e0ffbb874a2e3241.jpg" alt="PHPinfo" /></p>

<h1>Mysql or MariaDB Installation</h1>

<p>安装 Mysql/MariaDB, <code>sudo pacman -S mysql</code></p>

<p>启用 pdo_mysql.so 和 mysqli.so, 打开 <code>sudo vim /etc/php/php.ini</code>, 分别去掉如下两条配置的注释符</p>

<pre><code class="bash">extension=pdo_mysql.so
extension=mysqli.so
</code></pre>

<p>目前的配置到此结束。</p>

<h1>参考文献</h1>

<p><a href="https://wiki.archlinux.org/index.php/Apache">https://wiki.archlinux.org/index.php/Apache</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian上搭建ShadowSocks服务]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/15/debian-shadowsocks/"/>
    <updated>2014-10-15T11:46:04+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/15/debian-shadowsocks</id>
    <content type="html"><![CDATA[<p>在DigitalOcean上搭建好Droplet后的第一件事就是搭建ShadowSocks服务, 用ShadowSocks翻墙时最受不了的就是服务器失效, 所以最靠谱的就是自己搭建一个</p>

<p>采用ShadowSocks的libev版本, 这个版本的特点是内存占用小(600k左右),使用libev和C编写，低CPU消耗，甚至可以安装在基于OpenWRT的路由器上<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>这篇博客有借鉴价值, 对于Debian、Ubuntu、Arch等意义并不大, 这个发行版都有源</p>

<h1>Install</h1>

<p>关于之前提到的三个发行版(Debian, Ubuntu, Arch), Debian和Ubuntu的情况差不多, 不过Ubuntu已经很久不玩了, 也不清楚什么状况, Arch相关的安装配置以后补上</p>

<h2>Debian源的配置</h2>

<p>ShadowSocks不在官方源里, 需要额外配置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/apt/sources.list
</code></pre>

<p>按照系统的版本增加源, Debian Wheezy指的是Debian 7</p>

<pre><code class="bash"># Debian Wheezy, Ubuntu 12.04 or any distribution with libssl &gt; 1.0.1
deb http://shadowsocks.org/debian wheezy main

# Debian Squeeze, Ubuntu 11.04, or any distribution with libssl &gt; 0.9.8, but &lt; 1.0.0
deb http://shadowsocks.org/debian squeeze main
</code></pre>

<p>增加完后更新缓存</p>

<pre><code class="bash">&gt;&gt; sudo apt-get update
</code></pre>

<h2>Install &amp;&amp; Configure &amp;&amp; Start Service</h2>

<blockquote><p>Debian</p></blockquote>

<p>采用如下命令安装shadowsocks-libev</p>

<pre><code class="bash">&gt;&gt; sudo apt-get install shadowsocks
</code></pre>

<p>安装完后, 编辑配置文件, 设定监听地址、端口、密码以及加密方式, 然后启动服务</p>

<pre><code class="bash"># Edit the configuration
&gt;&gt; sudo vim /etc/shadowsocks/config.json

# Start the service
&gt;&gt; sudo /etc/init.d/shadowsocks start
</code></pre>

<h2>检测</h2>

<p>通过如下命令检测服务是否开启</p>

<pre><code class="bash">&gt;&gt; ps -ef | grep ss-server | grep -v ps | grep -v grep
</code></pre>

<p>也可以检测端口是否被监听来判断</p>

<pre><code class="bash">&gt;&gt; netstat -antl
</code></pre>

<h1>Configure</h1>

<h2>General</h2>

<p>配置文件的内容如下</p>

<pre><code class="bash">{
    "server":"my_server_ip",
    "server_port":8388,
    "local_address": "127.0.0.1",
    "local_port":1080,
    "password":"mypassword",
    "timeout":300,
    "method":"aes-256-cfb",
    "fast_open": false,
    "workers": 1
}
</code></pre>

<p>其中 <code>server</code> 是ShadowSocks监听的ip, 一般设置成服务器的公网IP; <code>server_port</code> 是ShadowSocks监听的端口, 据说拉低端口号会提高速度, 有一些人比较极端的会设置成443(https的端口); <code>password</code> 应该不用说了; <code>method</code> ShadooSocks支持很多中加密方式, 有些安全但速度比较慢, 有些不太安全但速度快, 看你怎么选择<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<h2>IPV4 And IPV6</h2>

<p>因为在学校里有IPV6的环境, 方便在没有网络的时候可以采用IPV6来上网</p>

<p>如果把 <code>server</code> 设置成服务器的公网IP, 那就只能适用IPV4连接, 如果设置成服务器的IPV6地址, 那就只能IPV6连接, 为此还查了一番, 这个问题比较好解决, 按照这样设置即可 <code>"server": "::"</code></p>

<p>如此设置时的确可以完成同时响应IPV4和IPV6, 但是在查看端口监听的时候只能发现程序监听了IPV6</p>

<pre><code class="bash">&gt;&gt; netstat -antl | grep "server_port"
tcp6       0      0 :::2299                 :::*                    LISTEN
</code></pre>

<h2>统计流量</h2>

<p>由于我希望同时监听IPV4和IPV6, 而接下来要介绍的方法我不敢保证是否支持这一特性, 同时我也暂时没有时间, 因此没有测试, 仅供参考, 来自于<a href="http://yzs.me/"></a>的<a href="http://yzs.me/2230.html">利用IPTABLES对Shadowsocks统计流量</a></p>

<p>原理: ShadowSocks监听内网地址, 通过iptables的网络转发功能把数据转发到内网地址上来实现</p>

<p>1) 添加一个loop back用的内网IP</p>

<pre><code class="bash">&gt;&gt; ifconfig eth0:ss1 10.10.10.10 netmask 255.255.255.0 up
</code></pre>

<p><strong>注意:</strong></p>

<ol>
<li><p>网卡名不是eth0的自己修改</p></li>
<li><p>以这种形式增加的内网地址在重启后会失效, 可以修改网卡的配置文件(/etc/network/interfaces或/etc/sysconfig/network-scripts/)添加IP，或者把添加IP的命令加到/etc/rc.local里面</p></li>
</ol>


<p>2) 修改ShadowSocks监听的网络, 并重启 <code>sudo service shadowsocks restart</code></p>

<pre><code class="bash">"server":"10.10.10.10",
</code></pre>

<p>3) 开启系统的IPV4转发功能</p>

<pre><code class="bash">&gt;&gt; sudo vim /etc/sysctl.conf
</code></pre>

<p>确保 <code>net.ipv4.ip_forward = 1</code> 前没有 <code>#</code></p>

<p>如果有修改, 执行 <code>sudo sysctl -p</code> 使之生效</p>

<p>4) iptables 设置转发</p>

<pre><code class="bash">&gt;&gt; iptables -t nat -I PREROUTING -p tcp --dport SERVER_PORT -j DNAT --to-destination 10.10.10.10
</code></pre>

<p>5) 设置统计流量</p>

<p>统计内网地址的入网和出网的流量</p>

<pre><code class="bash">&gt;&gt; iptables -I INPUT -d 10.10.10.10
&gt;&gt; iptables -I OUTPUT -s 10.10.10.10
</code></pre>

<p>查询流量</p>

<pre><code class="bash">&gt;&gt; iptables -L -n -v
</code></pre>

<p><strong>注意:</strong></p>

<p>这样设置无法清空10.10.10.10的统计数据, 解决办法: 因为加入到FORWARD里面了，不能直接-Z，否则会全部清零，如果要清零单条，最好创建另一个链，把这个记录加入那个链中，再把那个链加入FORWARD中，清零是直接iptables -Z 链名称就行了</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>参考自<a href="http://teddysun.com/">秋水逸冰</a>的<a href="http://teddysun.com/358.html">Debian下shadowsocks-libev一键安装脚本</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>参考自<a href="https://github.com/madeye/shadowsocks-libev">ShadowSocks-libev</a>的<a href="https://github.com/madeye/shadowsocks-libev#install-from-repository">Install from repository</a>, 包括两份版本的Debian和Ubuntu的源<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>参考自<a href="https://github.com/clowwindy/shadowsocks#configuration">shadowsocks-libev作者的Github</a>, 里面有具体的说明<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian上开启VPN(PPTP)服务]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/11/debian-vpn/"/>
    <updated>2014-10-11T10:37:11+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/11/debian-vpn</id>
    <content type="html"><![CDATA[<p>有了纽约的服务器貌似必须开启代理模式, 虽然ShadowSocks要比VPN好多了, 但毕竟需要额外的软件或者额外的硬件, 而VPN的客户端却是各种平台上预先搭载的, 因此就有了想搭建VPN的想法, 开动&hellip;..</p>

<p>1.First, 安装pptp的服务端</p>

<pre><code class="bash">&gt;&gt; sudo apt-get install pptpd
</code></pre>

<p>2.Second, 配置在VPN模式下各主机的IP, <code>localip</code> 指的是VPN模式下PPTP服务器的IP, <code>remoteip</code> 指的是连接到PPTP服务器上的客户端的IP, 通常是一段范围, 编辑文件 <code>sudo vim /etc/pptpd.conf</code>, 在文件最后加上类似代码, 具体参数自定</p>

<pre><code class="bash">localip 192.168.92.1
remoteip 192.168.92.11-16
</code></pre>

<p>3.Third, 编辑PPTP服务器参数, 参照如下参数配置, 编辑文件 <code>sudo vim /etc/pptpd.conf</code></p>

<pre><code class="bash">name pptpd
refuse-pap
refuse-chap
refuse-mschap
require-mschap-v2
require-mppe-128
ms-dns 8.8.8.8
ms-dns 8.8.4.4
#nodefaultroute
#debug
#dump
proxyarp
lock
nobsdcomp
#nologfd
logfile /var/log/pptpd.log
</code></pre>

<p><strong>说明:</strong></p>

<ul>
<li><p>name pptpd：pptpd server的名称</p></li>
<li><p>refuse-pap：拒绝pap身份验证模式</p></li>
<li><p>refuse-chap：拒绝chap身份验证模式</p></li>
<li><p>refuse-mschap：拒绝mschap身份验证模式</p></li>
<li><p>require-mschap-v2：在端点进行连接握手时需要使用微软的mschap-v2进行自身验证</p></li>
<li><p>require-mppe-128：MPPE 模块使用 128 位加密</p></li>
<li><p>ms-dns 8.8.8.8：ppp为Windows客户端提供DNS服务器IP地址，第一个ms-dns为DNS Master，第二个为DNS Slave, 此处选用的DNS是Google的</p></li>
<li><p>proxyarp：建立 ARP 代理键值</p></li>
<li><p>lock：锁定客户端 PTY 设备文件</p></li>
<li><p>nobsdcomp：禁用 BSD 压缩模式</p></li>
<li><p>nologfd：禁止将错误信息记录到标准错误输出设备(stderr)</p></li>
</ul>


<p>4.设置用户, 编辑文件 <code>sudo vim /etc/ppp/chap-secrets</code>, 增加这样的条目 <code>username pptpd password *</code>, 其中 username 和 password 是登录口令, pptpd是服务器上PPTP软件名(默认不动), * 指代接受的IP地址</p>

<p>5.全部搞定后，我们需要重启 pptpd 服务使新配置生效 <code>sudo /etc/init.d/pptpd restart</code></p>

<p>如果这时候尝试连接的话是可以连上的，但是只能访问机器资源，不能上网，想上网的话需要继续配置。</p>

<p>6.配置IPV4的转发</p>

<p>编辑文件 <code>sudo vim /etc/sysctl.conf</code>, 修改信息如下</p>

<pre><code class="bash">#net.ipv4.ip_forward=1
net.ipv4.ip_forward=1
</code></pre>

<p>然后执行 <code>sudo sysctl –p</code> 使得修改生效, 看命令执行后的信息反馈中有无 <code>net.ipv4.ip_forward = 1</code> 这一条</p>

<p>7.防火墙iptable信息转发</p>

<pre><code class="bash">&gt;&gt; iptables -t nat -A POSTROUTING -s 192.168.9.0/24 -o eth0 -j MASQUERADE
</code></pre>

<p>8.查看端口是否打开</p>

<pre><code class="bash">&gt;&gt; netstat -antl
</code></pre>

<hr />

<p>参考资料:</p>

<ol>
<li><p>Linux（VPS+Debian）搭建配置VPN（PPTP）服务 <a href="http://blog.csdn.net/frymgump/article/details/7346840">http://blog.csdn.net/frymgump/article/details/7346840</a></p></li>
<li><p>Debian搭建vpn <a href="http://www.cnblogs.com/timeship/archive/2013/03/09/2951184.html">http://www.cnblogs.com/timeship/archive/2013/03/09/2951184.html</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DigitalOcean上成功搭建Debian服务器]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/11/server-debian-setup/"/>
    <updated>2014-10-11T08:56:17+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/11/server-debian-setup</id>
    <content type="html"><![CDATA[<p>由于<a href="https://education.github.com/pack" title="Github 学生优惠">Github</a>做活动, 赠送了很多关于网站和其他的服务, 其中就包括<a href="https://cloud.digitalocean.com/" title="DigitalOcean 云服务器">DigitalOcean</a>的$100的优惠, 又来, 你知道的。</p>

<h1>Create Droplet</h1>

<p>在DigitalOcean上创建很简单, 把从Github上拿到的优惠码兑现也很简单, 因此就不再提了, 唯独要注意的是, DigitalOcean要用信用卡激活帐号(没有信用卡的用户, 比如我, 就得用PayPal向DigitalOcean充值至少$5, 貌似是要你向官方说明你有能力支付服务器产生的费用, 鬼知道是什么用意, 反正我花了￥30激活了帐号)</p>

<p>创建了服务器的过程也没什么好说(只要你有点脑子), 要说的只是几个注意点:</p>

<p>第一点就是关于 droplet setting, 见下图</p>

<p><img src="https://assets.digitalocean.com/articles/droplet/settings.png" title="Droplet Setting" alt="Droplet Setting" /></p>

<p>其中勾上Private Networking, 和 IPV6, 如果你想用数据备份服务可以选上Enbale Backups, 其中Enable User Data是只为CoreOS提供的<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>第二点就是当服务器创建完毕时, 你会收到一个邮件, 上面有服务器地址和登录口令</p>

<h1>Configurea Droplet</h1>

<p>首先修改ssh的默认端口</p>

<p>其实登录后发现bash实在让人忍不了, 就先装了一个zsh, <code>apt-get install zsh</code> and <code>usermod -s /usr/bin/zsh root</code> then <code>nano ~/.zshrc</code>, 然后把自己的zshrc的内容放进去, Logout and Login(其实是exit and ssh), 然后就没有然后了, 可以正式开始了。</p>

<p>在修改ssh的配置文件的时候, 又没法忍受只有vi的服务器, 然后 <code>apt-get install vim</code></p>

<p>正式开始, 修改配置文件 <code>vim /etc/ssh/sshd_config</code></p>

<p>修改其中的 <code>Port 22</code>, 改成其他端口(要牢记)</p>

<p>重启ssh server, <code>service ssh restart</code></p>

<p>以后在登录服务器的时要额外说明端口 <code>ssh username@ServerAdresss -p Port</code></p>

<p>然后配置iptable/防火墙策略, 艹, 貌似防火墙就没有开启, 以后再搞。</p>

<p>增加普通用户</p>

<pre><code class="bash">&gt;&gt; useradd -m -g users -G video,audio -s /usr/bin/zsh username
&gt;&gt; usermod -a -G video,audio,lp,games,users username
&gt;&gt; passwd username
</code></pre>

<p>在新建用户的时候, 又发现比较奇葩的现象, 系统里面没有<code>log wheel optical scanner storage power network</code>这些group</p>

<p>这不是重点, 重点是分配权限</p>

<pre><code class="bash">&gt;&gt; chmod 640 /etc/sudoers
&gt;&gt; vim /etc/sudoers
</code></pre>

<p>找到 <code>root    ALL=(ALL:ALL) ALL</code> 在下面增加一条 <code>username     ALL=(ALL:ALL) ALL</code></p>

<pre><code class="bash">&gt;&gt; chmod 440 /etc/sudoers
</code></pre>

<p>然后, 然后就以后在说吧。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>参考自DigitalOcean的官方社区, 详细信息参见<a href="https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet-virtual-server">Etel Sverdlov的帖子</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>

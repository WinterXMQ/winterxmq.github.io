<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[落寞纷飞]]></title>
  <link href="http://WinterXMQ.github.io/atom.xml" rel="self"/>
  <link href="http://WinterXMQ.github.io/"/>
  <updated>2014-10-11T15:20:27+00:00</updated>
  <id>http://WinterXMQ.github.io/</id>
  <author>
    <name><![CDATA[WinterXMQ]]></name>
    <email><![CDATA[WinterXMQ@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debian上开启VPN(PPTP)服务]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/11/debian-vpn/"/>
    <updated>2014-10-11T10:37:11+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/11/debian-vpn</id>
    <content type="html"><![CDATA[<p>有了纽约的服务器貌似必须开启代理模式, 虽然ShadowSocks要比VPN好多了, 但毕竟需要额外的软件或者额外的硬件, 而VPN的客户端却是各种平台上预先搭载的, 因此就有了想搭建VPN的想法, 开动&hellip;..</p>

<p>1.First, 安装pptp的服务端</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo apt-get install pptpd
</span></code></pre></td></tr></table></div></figure>


<p>2.Second, 配置在VPN模式下各主机的IP, <code>localip</code> 指的是VPN模式下PPTP服务器的IP, <code>remoteip</code> 指的是连接到PPTP服务器上的客户端的IP, 通常是一段范围, 编辑文件 <code>sudo vim /etc/pptpd.conf</code>, 在文件最后加上类似代码, 具体参数自定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>localip 192.168.92.1
</span><span class='line'>remoteip 192.168.92.11-16
</span></code></pre></td></tr></table></div></figure>


<p>3.Third, 编辑PPTP服务器参数, 参照如下参数配置, 编辑文件 <code>sudo vim /etc/pptpd.conf</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>name pptpd
</span><span class='line'>refuse-pap
</span><span class='line'>refuse-chap
</span><span class='line'>refuse-mschap
</span><span class='line'>require-mschap-v2
</span><span class='line'>require-mppe-128
</span><span class='line'>ms-dns 8.8.8.8
</span><span class='line'>ms-dns 8.8.4.4
</span><span class='line'><span class="c">#nodefaultroute</span>
</span><span class='line'><span class="c">#debug</span>
</span><span class='line'><span class="c">#dump</span>
</span><span class='line'>proxyarp
</span><span class='line'>lock
</span><span class='line'>nobsdcomp
</span><span class='line'><span class="c">#nologfd</span>
</span><span class='line'>logfile /var/log/pptpd.log
</span></code></pre></td></tr></table></div></figure>


<p><strong>说明:</strong></p>

<ul>
<li><p>name pptpd：pptpd server的名称</p></li>
<li><p>refuse-pap：拒绝pap身份验证模式</p></li>
<li><p>refuse-chap：拒绝chap身份验证模式</p></li>
<li><p>refuse-mschap：拒绝mschap身份验证模式</p></li>
<li><p>require-mschap-v2：在端点进行连接握手时需要使用微软的mschap-v2进行自身验证</p></li>
<li><p>require-mppe-128：MPPE 模块使用 128 位加密</p></li>
<li><p>ms-dns 8.8.8.8：ppp为Windows客户端提供DNS服务器IP地址，第一个ms-dns为DNS Master，第二个为DNS Slave, 此处选用的DNS是Google的</p></li>
<li><p>proxyarp：建立 ARP 代理键值</p></li>
<li><p>lock：锁定客户端 PTY 设备文件</p></li>
<li><p>nobsdcomp：禁用 BSD 压缩模式</p></li>
<li><p>nologfd：禁止将错误信息记录到标准错误输出设备(stderr)</p></li>
</ul>


<p>4.设置用户, 编辑文件 <code>sudo vim /etc/ppp/chap-secrets</code>, 增加这样的条目 <code>username pptpd password *</code>, 其中 username 和 password 是登录口令, pptpd是服务器上PPTP软件名(默认不动), * 指代接受的IP地址</p>

<p>5.全部搞定后，我们需要重启 pptpd 服务使新配置生效 <code>sudo /etc/init.d/pptpd restart</code></p>

<p>如果这时候尝试连接的话是可以连上的，但是只能访问机器资源，不能上网，想上网的话需要继续配置。</p>

<p>6.配置IPV4的转发</p>

<p>编辑文件 <code>sudo vim /etc/sysctl.conf</code>, 修改信息如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#net.ipv4.ip_forward=1</span>
</span><span class='line'>net.ipv4.ip_forward<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>然后执行 <code>sudo sysctl –p</code> 使得修改生效, 看命令执行后的信息反馈中有无 <code>net.ipv4.ip_forward = 1</code> 这一条</p>

<p>7.防火墙iptable信息转发</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; iptables -t nat -A POSTROUTING -s 192.168.9.0/24 -o eth0 -j MASQUERADE
</span></code></pre></td></tr></table></div></figure>


<p>8.查看端口是否打开</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; netstat -antl
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>参考资料:</p>

<ol>
<li><p>Linux（VPS+Debian）搭建配置VPN（PPTP）服务 <a href="http://blog.csdn.net/frymgump/article/details/7346840">http://blog.csdn.net/frymgump/article/details/7346840</a></p></li>
<li><p>Debian搭建vpn <a href="http://www.cnblogs.com/timeship/archive/2013/03/09/2951184.html">http://www.cnblogs.com/timeship/archive/2013/03/09/2951184.html</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DigitalOcean上成功搭建Debian服务器]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/11/server-debian-setup/"/>
    <updated>2014-10-11T08:56:17+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/11/server-debian-setup</id>
    <content type="html"><![CDATA[<p>由于<a href="https://education.github.com/pack" title="Github 学生优惠">Github</a>做活动, 赠送了很多关于网站和其他的服务, 其中就包括<a href="https://cloud.digitalocean.com/" title="DigitalOcean 云服务器">DigitalOcean</a>的$100的优惠, 又来, 你知道的。</p>

<h1>Create Droplet</h1>

<p>在DigitalOcean上创建很简单, 把从Github上拿到的优惠码兑现也很简单, 因此就不再提了, 唯独要注意的是, DigitalOcean要用信用卡激活帐号(没有信用卡的用户, 比如我, 就得用PayPal向DigitalOcean充值至少$5, 貌似是要你向官方说明你有能力支付服务器产生的费用, 鬼知道是什么用意, 反正我花了￥30激活了帐号)</p>

<p>创建了服务器的过程也没什么好说(只要你有点脑子), 要说的只是几个注意点:</p>

<p>第一点就是关于 droplet setting, 见下图</p>

<p><img src="https://assets.digitalocean.com/articles/droplet/settings.png" title="Droplet Setting" alt="Droplet Setting" /></p>

<p>其中勾上Private Networking, 和 IPV6, 如果你想用数据备份服务可以选上Enbale Backups, 其中Enable User Data是只为CoreOS提供的<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>第二点就是当服务器创建完毕时, 你会收到一个邮件, 上面有服务器地址和登录口令</p>

<h1>Configurea Droplet</h1>

<p>首先修改ssh的默认端口</p>

<p>其实登录后发现bash实在让人忍不了, 就先装了一个zsh, <code>apt-get install zsh</code> and <code>usermod -s /usr/bin/zsh root</code> then <code>nano ~/.zshrc</code>, 然后把自己的zshrc的内容放进去, Logout and Login(其实是exit and ssh), 然后就没有然后了, 可以正式开始了。</p>

<p>在修改ssh的配置文件的时候, 又没法忍受只有vi的服务器, 然后 <code>apt-get install vim</code></p>

<p>正式开始, 修改配置文件 <code>vim /etc/ssh/sshd_config</code></p>

<p>修改其中的 <code>Port 22</code>, 改成其他端口(要牢记)</p>

<p>重启ssh server, <code>service ssh restart</code></p>

<p>以后在登录服务器的时要额外说明端口 <code>ssh username@ServerAdresss -p Port</code></p>

<p>然后配置iptable/防火墙策略, 艹, 貌似防火墙就没有开启, 以后再搞。</p>

<p>增加普通用户</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; useradd -m -g users -G video,audio -s /usr/bin/zsh username
</span><span class='line'>&gt;&gt; usermod -a -G video,audio,lp,games,users username
</span><span class='line'>&gt;&gt; passwd username
</span></code></pre></td></tr></table></div></figure>


<p>在新建用户的时候, 又发现比较奇葩的现象, 系统里面没有<code>log wheel optical scanner storage power network</code>这些group</p>

<p>这不是重点, 重点是分配权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; chmod <span class="m">640</span> /etc/sudoers
</span><span class='line'>&gt;&gt; vim /etc/sudoers
</span></code></pre></td></tr></table></div></figure>


<p>找到 <code>root    ALL=(ALL:ALL) ALL</code> 在下面增加一条 <code>username     ALL=(ALL:ALL) ALL</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; chmod <span class="m">440</span> /etc/sudoers
</span></code></pre></td></tr></table></div></figure>


<p>然后, 然后就以后在说吧。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>参考自DigitalOcean的官方社区, 详细信息参见<a href="https://www.digitalocean.com/community/tutorials/how-to-create-your-first-digitalocean-droplet-virtual-server">Etel Sverdlov的帖子</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Html中由于打印按钮引起的风波]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/08/html-print-media/"/>
    <updated>2014-10-08T12:41:20+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/08/html-print-media</id>
    <content type="html"><![CDATA[<p>这是由打印问题引起的风波, 不过确实弥补了我对css的认识。</p>

<p><strong>问题描述:</strong> 在信息打印的界面上需要放置打印按钮或者其他提示性的东西, 然而在正式打印时这些信息又不应该输出(至少打印按钮是不应该出现的)。</p>

<p><strong>问题分析:</strong> 这个需求非常正常, 且不说是否每个人都找得到浏览器的打印按钮, 就单是放置那些不应该在正式文档中出现的操作或者其他的提示性信息也是非常有用的, 极大的方便了用户的使用, 至少不用天天听到别人请教打印方法(玩笑)。</p>

<p>正式开始分析, 从结果上来看, 打印前后的内容变化了。第一直观印象就是有两份材料, 打印前显示一份, 打印后显示一份, 这也是我早期时候的解决方法: 对放置在页面上的打印按钮绑定JS函数, 让JS函数把页面上的信息处理干净后调用浏览器的打印功能, 这种办法遇到电脑小白没有任何问题, 但就怕遇到懂行的, 不按常理出牌, 直接采用浏览器的打印功能, 一切玩儿玩儿; 第二种就是一份材料两种显示, 这种解决方案我一直没想过, 也没干往那边想, 在查完资料后发现CSS是支持这种特性的。</p>

<p><strong>解决方案:</strong> 采用CSS的<a href="http://www.w3.org/TR/css3-mediaqueries/" title="W3C Media Queries的标准">Media Queries</a>, 这个功能的作用在于使得网页在不同的媒体上有不一样的显示效果<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, 具体的内容见<a href="http://www.w3cplus.com/blogs/airen" title="Airen Blog">Airen的博客</a>。</p>

<p>在这里简单的介绍一下如何在用Media的功能来时间打印和分辨率这两个问题:</p>

<p>1.打印里面的问题最常出现的是前后显示的东西不同, 其实我们需要做的就是把正常显示的关闭、把正常不现实的打开就好了, 对这部分的块给定独立的样式, 再在定义打印媒体下面独立定义即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">print</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">noprint</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.当我们需要对待一些特殊分辨率的屏幕时(当浏览器的窗口关小了也一样), 我们主需要再创立一套针对这个分辨率的css样式即可, 不用在用JS, 把所有问题交给浏览器自己解决</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">max-width</span><span class="o">:</span> <span class="nt">600px</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">选择器</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">属性</span><span class="o">:</span> <span class="err">属性值</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文档:</p>

<ol>
<li>Airen 的 CSS3 Media Queries, <a href="http://www.w3cplus.com/content/css3-media-queries">http://www.w3cplus.com/content/css3-media-queries</a></li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>看了CSS中关于Media的介绍后才豁然开朗, 以前用JS来解决屏幕大小的适应性问题用这种办法可以很简单的解决。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VBox下Linux与主机Windows的文件共享]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/10/06/vbox-linux-file-share/"/>
    <updated>2014-10-06T06:36:11+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/10/06/vbox-linux-file-share</id>
    <content type="html"><![CDATA[<p>本文的方法参考自<a href="http://blog.csdn.net/jakiechen68/article/details/7263023" title="Blog_VBox-Linux 文件共享">jakiechen</a>, 有什么不对的地方请大家指点。</p>

<p>适用对象: VBox下 子系统为Linux, 安装了增强工具包(virtualbox-guest-utils in Arch Linux)</p>

<ol>
<li>VBox 下设置共享文件夹</li>
</ol>


<p>在VBox下设置一个共享文件夹, 菜单栏 -> 设备 -> 共享文件夹, 在 &lsquo;共享文件夹列表&rsquo; 下增加一个固定分配。</p>

<p>选择共享文件夹, 设置共享文件夹名称(不要含中文或者其他方块字)。</p>

<p><strong>注意:</strong> 1. 要记住共享文件夹的名字, 不要随意变更, 这个和Linux中的设置有关, 2. 不要选择 <code>Auto-mount</code> 即自动挂载<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p><img class="center" src="http://WinterXMQ.github.io/p/pic/file_share_1.png" title="增加共享文件夹" ></p>

<p><img class="center" src="http://WinterXMQ.github.io/p/pic/file_share_2.png" title="增加共享文件夹列表" ></p>

<ol>
<li>Linux 下挂载</li>
</ol>


<p>创建文件夹 <code>mkdir -p /mnt/share</code></p>

<p>挂载共享文件夹 <code>sudo mount -t vboxsf Tex /mnt/share</code></p>

<p>然后就可以在 <code>/mnt/share</code> 下看到恭喜文件夹里的内容了</p>

<p><em>为了方便管理, 我把这个文件夹软连接到我的工作文件夹下了, <code>ln -s /mnt/share ~/Code/tex</code></em></p>

<ol>
<li>设置自动挂载</li>
</ol>


<p>为了方便使用, 将其设置成自动挂载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo vim /etc/fstab
</span><span class='line'>Add following
</span><span class='line'><span class="c"># VBox share file</span>
</span><span class='line'>Tex     /mnt/share  vboxsf  rw,gid<span class="o">=</span>100,uid<span class="o">=</span>1000,auto    <span class="m">0</span> 0
</span></code></pre></td></tr></table></div></figure>



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>参考自jakiechen, 上面说在下次重启后会出现由于共享文件夹为空而挂载失败, 出现的错误提示为: /sbin/mount.vboxsf: mounting failed with the error: Invalid argument<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress特性设置-新建Blog脚本功能定制]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/09/28/octopress-new-post-feature-add-p1/"/>
    <updated>2014-09-28T12:52:34+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/09/28/octopress-new-post-feature-add-p1</id>
    <content type="html"><![CDATA[<h1>新建Blog并自动使用vim打开新建文档</h1>

<hr />

<p>在使用 <code>rake new_post</code> 或者 <code>rake new_post['title']</code> 后, 需要手动打开新建的Makedown文件, 太过于繁琐</p>

<p>Octopress是采用Ruby make脚本即rake来完成的, 因此只需要修改Ruby的任务脚本 <code>Rakefile</code> 即可</p>

<p>首先, 现在脚本文件的开头位置定义编辑器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>require <span class="s2">&quot;stringex&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Editor_config</span>
</span><span class='line'><span class="nv">editor</span> <span class="o">=</span> <span class="s2">&quot;vim&quot;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>然后再每个new_post的任务结尾处加上下述代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>task :new_post, :title <span class="k">do</span> <span class="p">|</span>t, args<span class="p">|</span>
</span><span class='line'>...
</span><span class='line'>  end
</span><span class='line'>  <span class="k">if</span> <span class="c">#{editor}</span>
</span><span class='line'>    system <span class="s2">&quot;#{editor} #{filename}&quot;</span>
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>注: new_page任务中也需要同样的设置(虽然还不知道这个任务是干什么的)</p>

<h1>新建Blog时支持文件名和Blog的title分离</h1>

<hr />

<p>在Octopress中写Blog, 时常会出现新建完Blog后还要去修改Title, 虽然没有什么问题, 但总需要这么做就显得有点麻烦, 按照Octopress管理Blog的形式在Rake的任务脚本中自定义Rake任务, 自定义过程如下</p>

<p>这个任务与普通的new_post任务差别不大, 主要在于接受的参数多了一个, 此外在创建文件的文件名和写入文件的title名有区别而已, 在Rakefile中加入如下代码</p>

<figure class='code'><figcaption><span>post.rb  (2014-10-03-new-post-add-post.rb)</span> <a href='http://WinterXMQ.github.io/p/code/2014-10-03-new-post-add-post.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">usage</span> <span class="n">rake</span> <span class="n">post</span><span class="o">[</span><span class="nb">name</span><span class="p">,</span><span class="n">title</span><span class="o">]</span> <span class="ow">or</span> <span class="n">rake</span> <span class="n">post</span><span class="o">[</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;title&#39;</span><span class="o">]</span> <span class="ow">or</span> <span class="n">rake</span> <span class="n">post</span><span class="o">[</span><span class="n">title</span><span class="o">]</span> <span class="ow">or</span> <span class="n">rake</span> <span class="n">post</span><span class="p">(</span><span class="n">default</span> <span class="n">to</span> <span class="n">post</span><span class="p">)</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Begin a new post in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:post</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:title</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="n">get_stdin</span><span class="p">(</span><span class="s2">&quot;Enter a filename for your post:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">title</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">get_stdin</span><span class="p">(</span><span class="s2">&quot;Enter a title for your post:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="nb">name</span><span class="o">.</span><span class="n">to_url</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">new_post_ext</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class='line'>    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="c1">#{editor}</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">editor</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>增加自动新建Code的任务</h1>

<hr />

<p>Octopress总有新建Blog的任务, 当需要在Blog中插入大段代码时却需要手动新建代码文件, 略微显得有些蛋疼, 于是创建了这个任务</p>

<p>Octopress中有 <code>include_code</code> 的功能, 而此次为Octopress增加的 <code>新建 Code</code> 的任务也是为了这个功能设置的</p>

<h2>小幅修改 include_code</h2>

<p>在 <code>include_code</code> 中只需要给出Code文件的文件名, 系统会在预先设定的源码文件夹中寻找文件</p>

<p>因此, 第一点要修改源码的默认路径&lt;什么文件都要放在download下, 你不觉得很失败吗></p>

<p>此处需要修改两个地方: 1) 站点配置文件 <code>_config.yml</code> 下的 <code>code_dir</code> 2) <code>include_code</code>功能的代码生成器 <code>plugins\include_code.rb</code>中的相关设定</p>

<p>1) 对于这个没有什么好说明的, 只需要打开 <code>_config.yml</code>, 修改 <code>code_dir: p/code</code>, 唯一的<strong>注意点</strong>: 目录的前后都不要有 <code>/</code></p>

<p>2) 需要替换 <code>plugins\include_code.rb</code> 中关于 <code>code_dir</code> 的默认设定</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_dir</span> <span class="o">=</span> <span class="s1">&#39;p/code&#39;</span>
</span><span class='line'><span class="c1"># code_dir = (context.registers[:site].config[&#39;code_dir&#39;].sub(/^\//,&#39;&#39;) || &#39;dowanload/code&#39;)</span>
</span><span class='line'><span class="n">code_dir</span> <span class="o">=</span> <span class="p">(</span><span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">config</span><span class="o">[</span><span class="s1">&#39;code_dir&#39;</span><span class="o">].</span><span class="n">sub</span><span class="p">(</span><span class="sr">/^\//</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="n">default_dir</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>此外, 个人觉得在这个功能中只给出文件名有些不好, 因此就增加了同样支持给出完整的相对路径, 如 <code>p/code/filename</code>&lt;纯属蛋疼></p>

<p>在 <code>plugins\include_code.rb</code> 中修改如下代码&lt;紧接着上面的代码></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="vi">@file</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="n">code_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@file</span> <span class="o">=</span> <span class="vi">@file</span><span class="o">[</span><span class="n">code_dir</span><span class="o">.</span><span class="n">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="vi">@file</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>增加Rake任务 Code</h2>

<p>完成了对 <code>include_code</code> 的改造, 紧接着要完成最重要的内容, 即新增任务, 在 <code>Rakefile</code> 中增加如下内容</p>

<figure class='code'><figcaption><span>new-code.rb  (2014-10-04-new-post-new-code.rb)</span> <a href='http://WinterXMQ.github.io/p/code/2014-10-04-new-post-new-code.rb'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># usage rake code[name] or rake code[&#39;name&#39;] or rake code(default to code)</span>
</span><span class='line'><span class="c1"># tack for new code files</span>
</span><span class='line'><span class="n">desc</span> <span class="s2">&quot;Begin a new code file in </span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">code_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:code</span><span class="p">,</span> <span class="ss">:name</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="p">,</span> <span class="n">args</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="n">get_stdin</span><span class="p">(</span><span class="s2">&quot;Enter a filename for your code:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.&quot;</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">source_dir</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mkdir_p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">code_dir</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">basicname</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">code_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">basicname</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">abort</span><span class="p">(</span><span class="s2">&quot;rake aborted!&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">ask</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2"> already exists. Do you want to overwrite?&quot;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="p">,</span> <span class="s1">&#39;n&#39;</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;n&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="c1">#{editor}</span>
</span><span class='line'>    <span class="nb">system</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">editor</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exist?</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Created new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;{% include_code [filename] lang:Language </span><span class="si">#{</span><span class="n">basicname</span><span class="si">}</span><span class="s2"> %}&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  or  {% include_code [filename] lang:Language </span><span class="si">#{</span><span class="n">code_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">basicname</span><span class="si">}</span><span class="s2"> %}&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;  can be used in blog markdown files.&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;File is canceled.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archlinux 的安装]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/09/28/archlinux-install/"/>
    <updated>2014-09-28T00:08:29+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/09/28/archlinux-install</id>
    <content type="html"><![CDATA[<p>其实很早就像写个Archlinux的安装Blog, 但是由于很多原因就一直拖到现在才开始动手</p>

<p>Archlinux和Linux的其他发行版不同, Arch就像是四驱赛车一样, 需要自己挑选零件、自己组装, 因此具有很大的自由度而且难度也不是非常大&lt;当然相比于其他的发行版已经是难多了, 其实我比较推从gentoo, 它比Arch还要复杂, 因为它连零件都要自己制作>。选择Arch的第二个原因是它的软件中心, 支持自定义软件。</p>

<p>接下来我们谈谈Arch的安装问题, 我分别在虚拟机<code>Vbox</code>和实体机都装过, 因此在这个Blog中会详细的谈谈。在Arch安装中最复杂的就是桌面环境的配置, 我也尚未完全搞定, 因此不再Blog中做过多的说明。</p>

<h1>Basic System Install</h1>

<p>基本系统的安装在虚拟机和实体机上的差别为0, 其中的注意点就是在于软件包的选择和安装上。</p>

<h2>Download the system for installation</h2>

<p>首先需要下载<a href="https://www.archlinux.org/download/" title="Arch Linux System Download">官方镜像</a>, 无论用什么下载工具都无所谓。</p>

<p>在这个小节中最重要的就是如何制作安装U盘&lt;如果只是为了说明如何下载就开一个新的小节来说明就显得太脑残了, 同时这一小节也是虚拟机和实体机安装中为数不多的差别中的第一个>。</p>

<blockquote><p>Linux</p></blockquote>

<p>在Linux中, 启动U盘相对好做一点&lt;毕竟要安装的是Linux, 同时是因为Linux中对待磁盘的工具比较灵活, 可以满是不同的磁盘操作需求>。</p>

<p>首先, 通过 <code>lsblk</code> 来找到你的U盘</p>

<p>然后通过下面的命令完成镜像的写入<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; dd <span class="nv">bs</span><span class="o">=</span>4M <span class="k">if</span><span class="o">=</span>/path/to/archlinux.iso <span class="nv">of</span><span class="o">=</span>/dev/sdx <span class="o">&amp;&amp;</span> sync
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Windows</p></blockquote>

<p>在Windows下需要借助第三方的软件来达到目标, 采用<a href="http://rufus.akeo.ie/" title="Rufus 下载">Rufus</a>。当然也有其他的解决方案, 但是不怎么方便&lt;其实是我自己没有成功过>。</p>

<blockquote><p><strong>注意点</strong>:</p>

<ol>
<li><p> 任何被用来制作Arch Linux的安装盘的U盘中的数据都会被清除, 而且无论U盘是多大的, 制作完毕后可用的内存都是24M&lt;没记错的是话就是这么大的>。</p></li>
<li><p> 如果U盘需要还原, 在以后的Blog中介绍</p></li>
<li><p> 对于这部分有什么疑问的可以参照<a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media" title="Arch Linux Official Wiki on USB-Flash-Install-Media">Arch Linux的官方Wiki</a></p></li>
</ol>
</blockquote>

<h2>Configure the Install System</h2>

<p><em>说明: 开这个小节主要是为了总结我的安装过程, 很多朋友应该可以直接忽略</em></p>

<p>首先启动系统&lt;如何启动系统就不说了></p>

<h3>Configure the net</h3>

<p>配置网络:</p>

<ol>
<li><p> 虚拟机: 一般的新建的虚拟机都可以正常的访问网络&lt;如果有问题, 请问度娘></p></li>
<li><p> 实体机:</p>

<ul>
<li><p>Wifi: 运行 <code>wifi-menu interface-name</code></p></li>
<li><p>dsl:  依次运行 <code>pppeo-setup</code>, <code>pppoe-start</code> 来启动dsl, 运行 <code>pppoe-stop</code> 来停止dsl</p></li>
</ul>
</li>
</ol>


<p><em>对于虚拟机可能需要配置静态IP, 通过 <code>ip addr add dev enp0s8 192.168.1.109/24</code> 来完成</em></p>

<h3>About the Sources</h3>

<p>这的地方的配置主要是为了解决国外源速度慢的问题, 把源换成国内相对比较快的。</p>

<p>首先先备份一下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; <span class="nb">cd</span> /etc/pacman.d/
</span><span class='line'>&gt;&gt; mv mirrorlist mirrorlist.origin
</span></code></pre></td></tr></table></div></figure>


<p>设置软件源, 由于<a href="https://www.archlinux.org/mirrorlist" title="Arch Linux 官方软件园查询">Arch提供软件源查询</a>的功能, 我们采用官方查询的方式解决。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; wget -c <span class="s2">&quot;https://www.archlinux.org/mirrorlist/?country=CN&amp;protocol=http&amp;ip_version=4&amp;ip_version=6&quot;</span> -O mirrorlist
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意点</strong>: 下载官方软件源查询出来的文件中的软件源都是被注释掉的, 我们需要手动打开 <code>nano mirrorlist</code>, 即去除 <code>mirrorlist</code> 文件中的 #</p>

<p>此外, 还可以采用Arch中的一个工具对配置中的软件源进行速度排序&lt;可以试试>, 具体操作如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; mv mirrorlist mirrorlist.backup
</span><span class='line'>&gt;&gt; rankmirrors -n <span class="m">6</span> mirrorlist.backup &gt; mirrorlist
</span></code></pre></td></tr></table></div></figure>


<p>然后更新pacman的缓存 <code>pacman -Syy</code>, 同时装上vim方便修改配置文件 <code>pacman -S vim</code></p>

<p>在这里, 提一下个人的习惯, 在终端下配置和安装系统总有些不习惯&lt;开始玩Arch的时候, 现在无所谓了>, &lt;如果条件允许>总是在另一个电脑上用ssh登陆, 进行远程安装&lt;尤其是在虚拟机里安装时, 相对方便一些></p>

<p>可以按照如下命令完成ssh server的配置安装, 同时需要记住本机IP, 通过 <code>ifconfig</code> 查看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; pacman -S openssh
</span><span class='line'>&gt;&gt; systemctl start sshd
</span></code></pre></td></tr></table></div></figure>


<h2>Install the System</h2>

<p>在这里完成基本系统的安装, 使得电脑可以脱离安装光盘orU盘独立运行和配置</p>

<h3>About Partition</h3>

<p>这里不涉及磁盘分区的具体知识, 也不涉及如何分区, 只提两点:</p>

<ol>
<li><p>如果在虚拟机里安装时, 初始安装不要求磁盘有多大&lt;只要有2G就足够了, 后期不够可以再加></p></li>
<li><p>home可以单独分区或分磁盘</p></li>
</ol>


<p>按照如下命令完成分区操作</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; cfdisk /dev/sda      <span class="c"># 进行分区, 2G的Swap分区, 其余的/分区</span>
</span><span class='line'>&gt;&gt; lsblk
</span><span class='line'>&gt;&gt; fdisk -l
</span><span class='line'>&gt;&gt; mkfs.ext4 /dev/sda1  <span class="c"># 格式化 /分区</span>
</span><span class='line'>&gt;&gt; mkswap /dev/sda2     <span class="c"># 格式化 Swap分区</span>
</span><span class='line'>&gt;&gt; swapon /dev/sda2     <span class="c"># 挂载 Swap分区</span>
</span><span class='line'>&gt;&gt; mount /dev/sda1 /mnt <span class="c"># 挂在 /分区</span>
</span><span class='line'>&gt;&gt; fdisk -l             <span class="c"># 显示挂载情况</span>
</span><span class='line'>&gt;&gt; lsblk -f
</span></code></pre></td></tr></table></div></figure>


<h3>System Installation</h3>

<p>完成基本系统的安装, 以及配置的基本工具, 按照如下指令完成</p>

<p>下面的四个命令分别完成 <code>基本系统</code>, <code>shell</code>, <code>网络连接工具</code>, <code>常用工具</code> 的安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; pacstrap -i /mnt base base-devel
</span><span class='line'>&gt;&gt; pacstrap -i /mnt bash-completion zsh
</span><span class='line'>&gt;&gt; pacstrap -i /mnt ifplugd wireless_tools wpa_supplicant iw wpa_actiond dialog net-tools rp-pppoe
</span><span class='line'>&gt;&gt; pacstrap -i /mnt openssh vim
</span></code></pre></td></tr></table></div></figure>


<h3>System Configure</h3>

<p>完成最基本的系统配置<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<ol>
<li>生成分区列表</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>进入系统, <code>arch-chroot /mnt /bin/zsh</code></p></li>
<li><p>配置语言环境</p></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; vim /etc/locale.gen
</span><span class='line'>选择 en_US 和 zh_CN
</span><span class='line'>&gt;&gt; locale-gen
</span><span class='line'>&gt;&gt; <span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span><span class="s2">&quot;zh_CN.UTF-8&quot;</span>
</span><span class='line'>&gt;&gt; <span class="nb">export </span><span class="nv">LANGUAGE</span><span class="o">=</span><span class="s2">&quot;zh_CN:en_US:en&quot;</span>
</span><span class='line'>&gt;&gt; locale &gt; /etc/locale.conf            <span class="c"># 设置中文环境, 并写入配置</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>设置系统时间</li>
</ol>


<p>选择上海时区</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; ln -s /usr/share/zoneinfo/Zone/SubZone /etc/localtime
</span></code></pre></td></tr></table></div></figure>


<p>选择UTC</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; hwclock --systohc --utc
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>设置主机名, <code>echo Arch-XMQ &gt; /etc/hostname</code></p></li>
<li><p>设置内核模块加载, <code>mkinitcpio -p linux</code></p></li>
<li><p>用户设置</p></li>
</ol>


<p>root用户设置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; passwd
</span><span class='line'>&gt;&gt; usermod -s /usr/bin/zsh root
</span></code></pre></td></tr></table></div></figure>


<p>普通用户创建和配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; useradd -m -g users -G video,audio,power,network,wheel -s /usr/bin/zsh xmq
</span><span class='line'>&gt;&gt; usermod -a -G video,audio,lp,log,wheel,optical,scanner,games,users,storage,power xmq
</span><span class='line'>&gt;&gt; passwd xmq
</span></code></pre></td></tr></table></div></figure>


<p>普通用户的超级权限配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; chmod <span class="m">640</span> /etc/sudoers
</span><span class='line'>&gt;&gt; vim /etc/sudoers
</span><span class='line'>Add <span class="sb">`</span>xmq <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> ALL<span class="sb">`</span> or
</span><span class='line'>Add <span class="sb">`</span>wheel <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> ALL<span class="sb">`</span>
</span><span class='line'>&gt;&gt; chmod <span class="m">440</span> /etc/sudoers
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>引导系统的安装</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; pacman -S grub os-prober
</span><span class='line'>&gt;&gt; grub-install /dev/sda
</span><span class='line'>&gt;&gt; grub-mkconfig -o /boot/grub/grub.cfg
</span><span class='line'>&gt;&gt; grep -v rootfs /proc/mounts &gt; /etc/mtab
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>退出重启</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; <span class="nb">exit</span>
</span><span class='line'>&gt;&gt; umount /mnt
</span><span class='line'>&gt;&gt; reboot
</span></code></pre></td></tr></table></div></figure>


<h1>Desktop Configuration</h1>

<p>桌面的配置并没有完全搞定, 之前用过一段时间的KDE, Gnome, 也配置过一段时间的Openbox, 终究没用长久, 这里主要写一些关于XWindow的配置, 涉及一点的Openbox</p>

<h2>Configuration of Xorg</h2>

<p>这一部分主要完成从终端环境切换到图形界面, 主要包括 <code>X</code> 和 <code>桌面环境</code> 的配置</p>

<h3>Xorg Install</h3>

<p>完成Xorg的安装&lt;说实话Linxu的图形界面到底没弄明白, 不清楚Xorg到底是什么东东></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo pacman -S xorg-server xorg-server-utils xorg-utils xorg-xinit
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意:</strong> 这个命令中会让你选择gl的类库, 这个跟显卡有关, 我本机是Nvidia的显卡, 因此实体机安装时选择 <code>nvidia-libgl</code>, 而虚拟机安装时, 由于显卡是虚拟出来的, 因此只要简单的选择 <code>mesa-libgl</code> 即可</p>

<h3>About VAG</h3>

<p>这个地方是Arch Linux在安装过程中实体机与虚拟机的第二处不同点</p>

<ol>
<li>对于实体机而言只要安装了对应的驱动即可</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo pacman -S nvidia
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意:</strong> 需要重启后才生效, 此时会发现屏幕的分辨率降低不少</p>

<p>同时需要安装输入驱动&lt;包括键盘、鼠标和触摸板的驱动, 我遗忘里到底要安装多少, 以后再补上></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo pacman -S xf86-input-synapticsxf86-input-synaptics
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>虚拟机安装</li>
</ol>


<p>我只搞定了在VBox中的桌面安装, 在VMware中到底如何操作, 大家可以尝试尝试</p>

<p>首先安装VBox的驱动</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo pacman -S virtualbox-guest-utils
</span></code></pre></td></tr></table></div></figure>


<p>内核加载模块&lt;以下所有的操作需要管理员权限></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; modprobe -a vboxguest vboxsf vboxvideo
</span><span class='line'>&gt;&gt; depmod <span class="k">$(</span>uname -r<span class="k">)</span>
</span><span class='line'>&gt;&gt; vim /etc/modules-load.d/virtualbox.conf
</span><span class='line'>Add following
</span><span class='line'>vboxguest
</span><span class='line'>vboxsf
</span><span class='line'>vboxvideo
</span><span class='line'>&gt;&gt; VBoxClient-all
</span><span class='line'>&gt;&gt; systemctl <span class="nb">enable </span>vboxservice
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>3D加速 <code>sudo pacman -S mesa</code></li>
</ol>


<h3>About Desktop</h3>

<p>主要完成openbox的安装, 以及部分软件的安装, 至于具体的配置以后再补上</p>

<p>安装 Openbox&lt;桌面管理器>, slim&lt;登陆界面></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo pacman -S slim openbox
</span></code></pre></td></tr></table></div></figure>


<p>安装中文字体</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo pacman -S ttf-dejavu artwiz-fonts wqy-zenhei wqy-bitmapfont wqy-microhei ttf-arphic-ukai ttf-arphic-uming
</span></code></pre></td></tr></table></div></figure>


<p>配置和启动测试openbox</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; cp /etc/X11/xinit/xinitrc .xinitrc
</span><span class='line'>&gt;&gt; vim ~/.xinitrc
</span><span class='line'>Add following
</span><span class='line'><span class="nb">exec </span>openbox-session
</span><span class='line'>&gt;&gt; mkdir -p ~/.config/openbox
</span><span class='line'>&gt;&gt; cp /etc/xdg/openbox/<span class="o">{</span>rc.xml,menu.xml,autostart,environment<span class="o">}</span> ~/.config/openbox
</span></code></pre></td></tr></table></div></figure>


<p>通过 <code>startx</code> 来启动测试openbox</p>

<p>使得slim生效, 并重启, 进出桌面时代&lt;进入桌面时代, 并不意味着就不再接触终端环境了, 由于openbox的菜单没有配置好, 尽管号称进入桌面时代, 但在很长一段时间内还要和终端打交道></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt;&gt; sudo systemctl <span class="nb">enable </span>slim.service
</span></code></pre></td></tr></table></div></figure>


<h3>About the Software in Openbox</h3>

<p>记录部分软件在Openbox中的安装和配置</p>

<ol>
<li>shell</li>
</ol>


<p>安装X环境下的shell执行器 <code>sudo pacman -S terminator</code></p>

<ol>
<li>gvim</li>
</ol>


<p>采用gvim更换vim <code>sudo pacman -S gvim</code></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://wiki.archlinux.org/index.php/USB_flash_installation_media" title="Arch Linux Official Wiki on USB-Flash-Install-Media">ArchLinux Official Wiki USB Flash Install Media</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://wiki.archlinux.org/index.php/Beginners%27_guide" title="Arch Linux 官方用户新手指南">Arch Linux Official Wiki User Guide</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub Pages搭建基于Octopress的Blog]]></title>
    <link href="http://WinterXMQ.github.io/blog/2014/09/21/github-pages/"/>
    <updated>2014-09-21T13:44:02+00:00</updated>
    <id>http://WinterXMQ.github.io/blog/2014/09/21/github-pages</id>
    <content type="html"><![CDATA[<p>把Blog的源码托管在Github上，采用Github的Pages功能来呈现</p>

<p>[TOC]</p>

<h1>配置git的ssh key</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; ssh-keygen -t rsa -C <span class="s2">&quot;WinterXMQ@google.com&quot;</span>
</span><span class='line'>  &gt;&gt; clip &lt; ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>


<p>在执行 <code>ssh-keygen</code> 后需要输入 <code>passphrase</code>
执行完两个命令后ssh的公钥就已经在系统的粘贴板上了，然后登陆Github的设置->添加ssh公钥上完成相关的添加
接着按照下面的指令完成相关的测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; ssh -T git@github.com
</span></code></pre></td></tr></table></div></figure>


<p>当出现如下的提示，则说明配置成功</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Enter passphrase <span class="k">for</span> key <span class="s1">&#39;/home/xmq/.ssh/id_rsa&#39;</span>:
</span><span class='line'>Hi WinterXMQ! You<span class="err">&#39;</span>ve successfully authenticated, but GitHub does not provide shell access.
</span></code></pre></td></tr></table></div></figure>


<h1>配置本地的ruby和Jekyll、Octopress环境</h1>

<p>Octopress是基于Jekyll的，而Jekyll则是编写而成的，因此我们需要分别搭建这三个环境</p>

<h2>关于Ruby的安装配置</h2>

<p>网上有说需要保持ruby在某个版本上，根据我的测试，采用最新版本的ruby也同样没有问题，估计是早期的Jekyll对高版本的Ruby支持不好
在Arch Linux下采用 <code>pacman -S ruby</code> 完成Ruby的安装(默认Ruby已经安装)</p>

<p>Ruby 的官方源在国内的速度不佳，更换成淘宝的Ruby源</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; gem sources -a https://ruby.taobao.org/
</span><span class='line'>  &gt;&gt; gem sources --remove https://rubygems.org/
</span><span class='line'>  &gt;&gt; gem sources -l
</span></code></pre></td></tr></table></div></figure>


<p>注: 确保只有一条地址</p>

<p>采用 <code>sudo gem update --system</code> 更新gem脚本</p>

<h2>关于Jekyll和Octopress的安装</h2>

<p>Jekyll是Octopress的一个依赖，因此不用特意安装Jekyll
确保系统安装有 <code>Git</code>, 从Github上获取Octopress官方源码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; <span class="nb">cd </span>Code
</span><span class='line'>  &gt;&gt; git clone <span class="s2">&quot;git://github.com/imathis/octopress.git&quot;</span> blog
</span><span class='line'>  &gt;&gt; <span class="nb">cd </span>blog
</span></code></pre></td></tr></table></div></figure>


<p>这个目录就是以后写Blog和发布Blog的工作目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> + _deploy       &lt;- 发布在Github上用于站点显示的master<span class="o">(</span>gh-pages<span class="o">)</span>分支
</span><span class='line'> + public
</span><span class='line'> + plugins        &lt;- 用于放置Octopress的插件
</span><span class='line'> + sass           &lt;- 似乎和模板的关系比较密切, 作用未知
</span><span class='line'> - <span class="nb">source</span>     &lt;- 放置站点源码, 包括Blog的Makedown文件
</span><span class='line'>   ...
</span><span class='line'>   + _posts       &lt;- 放置Blog的Makedown文件
</span><span class='line'> + .themes        &lt;- 放置主题的
</span><span class='line'> . _config.yml    &lt;- 站点总配置文件
</span><span class='line'> . Gemfile        &lt;- Octopress安装脚本配置
</span><span class='line'> . Rakefile       &lt;- Octopress控制脚本
</span></code></pre></td></tr></table></div></figure>


<p>Octopress是采用 <code>bundle</code> 来完成安装的, <code>bundle</code> 会读取当前目录下的 <code>Gemfile</code> 来获取本次安装的软件源、以及所需要安装的软件包, <code>bundle</code> 会给出一些软件的依赖关系, 并自动安装所依赖的软件
同时 <code>bundle</code> 也是Ruby的软件需要通过 <code>gem install bundler</code> 来完成安装
然而通过 <code>gem</code> 安装的软件会被安装在 <code>~/.gem/ruby/VERSION_RUBY/</code>, 需要添加环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; sudo vim /etc/profile
</span><span class='line'>  add follow to the end of the file
</span><span class='line'>  <span class="nv">RUBY_HOME</span><span class="o">=</span>~/.gem/ruby/2.1.0
</span><span class='line'>  <span class="nv">PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PATH</span><span class="k">}</span>:<span class="k">${</span><span class="nv">RUBY_HOME</span><span class="k">}</span>/bin
</span><span class='line'>  <span class="nb">export </span>RUBY_HOME PATH
</span><span class='line'>  &gt;&gt; <span class="nb">source</span> /etc/profile
</span><span class='line'>  &gt;&gt; bundle --version
</span></code></pre></td></tr></table></div></figure>


<p>此外我们需要把 <code>Gemfile</code> 第一行的软件源换成<a href="https://ruby.taobao.org/">淘宝Ruby源</a> <code>source 'https://ruby.taobao.org/'</code>
然后执行 <code>bundle install</code>, 并耐性等待(当然采用国内的Ruby源, 安装时间不会太长)</p>

<h1>Blog工作目录与Github的设置</h1>

<p>无论是站点源码还是Blog都是采用git来管理, 需要把本地目录和Github做对接, 同时对站点进行最初步的设置</p>

<h2>与Github对接</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; git remote rm origin          <span class="c"># 删除Octopress的远程分支</span>
</span><span class='line'>  &gt;&gt; rake setup_github_pages
</span><span class='line'>    git@github.com:WinterXMQ/winterxmq.github.io.git
</span></code></pre></td></tr></table></div></figure>


<h2>站点初始化设置</h2>

<p>安装主题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; git clone git@github.com:shashankmehta/greyshade.git .themes/greyshade
</span><span class='line'>  &gt;&gt; <span class="nb">echo</span> <span class="s2">&quot;\$greyshade: color;&quot;</span> &gt;&gt; sass/custom/_colors.scss
</span><span class='line'>  &gt;&gt; rake <span class="s2">&quot;install[greyshade]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成站点数据</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; rake generate
</span></code></pre></td></tr></table></div></figure>


<p>注: 在Jekyll编译的时候会出现错误, 提示没有Javascript的解释器, 这里有两三个解决方案, 我采用的是安装nodejs, 采用 <code>sudo pacman -S nodejs</code> 完成安装</p>

<p>通过 4000 端口在本地预览Blog站点, <a href="http://127.0.0.1:400">http://127.0.0.1:400</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; rake preview
</span></code></pre></td></tr></table></div></figure>


<h2>上传源码</h2>

<p>把源码上传到Github的同个工程的source分支下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; git add .
</span><span class='line'>  &gt;&gt; git commit -m <span class="s2">&quot;Init Octopress&quot;</span>
</span><span class='line'>  &gt;&gt; git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h1>注意点</h1>

<h2>zsh引起无法新建Blog的问题</h2>

<p>解决在zsh下无法新建Blog的问题, 具体见参考文档5</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt;&gt; rake new_post<span class="o">[</span><span class="s2">&quot;arch-linux-reinstall-glibc.markdown&quot;</span><span class="o">]</span>
</span><span class='line'>  zsh: no matches found: new_post<span class="o">[</span>arch-linux-reinstall-glibc<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>原因: zsh中若出现 &lsquo;*&rsquo;, &lsquo;(&rsquo;, &lsquo;|&rsquo;, &lsquo;&lt;&rsquo;, &lsquo;[&rsquo;, or &lsquo;?&rsquo; 符号, 则将其识别为查找文件名的通配符
解决办法:
+ rake &ldquo;new_post[arch-linux-reinstall-glibc.markdown]&rdquo;
+ rake new_post
+ vim .zshrc  添加 alias rake=&ldquo;noglob rake&rdquo;</p>

<h1>参考文档</h1>

<blockquote><ol>
<li><a href="http://blog.csdn.net/binyao02123202/article/details/20130891">http://blog.csdn.net/binyao02123202/article/details/20130891</a></li>
<li><a href="http://blog.cnyingchao.com/website/disqus-simplified-chinese.html">http://blog.cnyingchao.com/website/disqus-simplified-chinese.html</a></li>
<li><a href="http://xuhehuan.com/783.html">http://xuhehuan.com/783.html</a></li>
<li><a href="http://minejo.github.io/blog/2013/08/09/shi-yong-github-plus-octopresszuo-blog/">http://minejo.github.io/blog/2013/08/09/shi-yong-github-plus-octopresszuo-blog/</a></li>
<li><a href="http://fancyoung.com/blog/use-octopress-new-post-function-with-zsh/">http://fancyoung.com/blog/use-octopress-new-post-function-with-zsh/</a></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
</feed>
